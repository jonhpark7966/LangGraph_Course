{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Contents</p> <ul> <li>Concept guide</li> <li> <p>LangGraph</p> <ul> <li>Agentic System</li> <li>Tool</li> <li>Memory</li> <li>Human-in-the-loop</li> <li>Customizing</li> </ul> </li> <li> <p>Agentic Patterns</p> <ul> <li>Reflection</li> <li>Planning</li> <li>Multi-Agent</li> </ul> </li> <li> <p>RAG</p> <ul> <li>Self RAG reflection</li> <li>Adaptive RAG</li> </ul> </li> </ul>"},{"location":"#1-day-course-curriculum","title":"1-Day Course Curriculum","text":"<p>\ud559\uc2b5 \ubaa9\ud45c \u00a0 - Agentic \uad6c\ud604 \uae30\ubc95\uc744 \ud559\uc2b5\ud558\uc5ec \uc790\uc720\ub3c4 \ub192\uc740 LLM \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158 \uc791\uc131 \u00a0 - LangGraph \ud504\ub808\uc784\uc6cc\ud06c\ub97c \uc0ac\uc6a9\ubc95 \uc2b5\ub4dd</p> <p>\ucee4\ub9ac\ud058\ub7fc - (1H) \uc778\ud2b8\ub85c: Agentic \uc2dc\uc2a4\ud15c \ucee8\uc149\u00a0 \u00a0 \u00a0 - LLM\uc744 \ub514\uc2dc\uc804 \uba54\uc774\ucee4\ub85c \uc0ac\uc6a9\ud558\uae30 \u00a0 \u00a0 - \uc0ac\ub840\ud0d0\uad6c: OpenAI o1 \ubaa8\ub378, ChatGPT\uc758 \ub3c4\uad6c\ub4e4 \u00a0 - (2H) LangGraph \ub85c Agent \uad6c\ud604\ud558\uae30 \u00a0 \u00a0 - Tool \uc950\uc5b4\uc8fc\uae30 (ex. Web Browsing) \u00a0 \u00a0 - \uae30\uc5b5\ub825 \ucd94\uac00\ud558\uae30 \u00a0 \u00a0 - Human in the loop, \uc0ac\ub78c\uc774 \uc9c1\uc811 \uac1c\uc785\ud558\ub3c4\ub85d \uc694\uccad\ud558\uae30 \u00a0 \u00a0 - Agent State \ucee4\uc2a4\ud130\ub9c8\uc774\uc9d5 \u00a0 - (4H) \uc720\uc6a9\ud55c Agent \uad6c\ud604 \ud328\ud134 \u00a0 \u00a0 - Planning, LLM\uc774 \uc9c1\uc811 \uacc4\ud68d\uc744 \uc138\uc6b0\uace0 \uc218\ud589\ud558\uae30 \u00a0 \u00a0 - Reflection, LLM\uc758 \uc140\ud504 \uccb4\ud06c, \uad50\uc815 \u00a0 \u00a0 - Agentic RAG, Agent \ud328\ud134\uc744 \ud65c\uc6a9\ud558\uc5ec RAG \uac1c\uc120\ud558\uae30</p>"},{"location":"1_langgraph_start/","title":"LangGraph \uc2dc\uc791\ud558\uae30","text":"In\u00a0[\u00a0]: Copied! <pre>%%capture --no-stderr\n%pip install -U langgraph langsmith\n\n# \ubcf8 \uc2e4\uc2b5\uc744 \uc704\ud574\uc11c \ub2e4\uc6b4\uc744 \ubc1b\uc2b5\ub2c8\ub2e4.\n%pip install -U langchain-openai\n</pre> %%capture --no-stderr %pip install -U langgraph langsmith  # \ubcf8 \uc2e4\uc2b5\uc744 \uc704\ud574\uc11c \ub2e4\uc6b4\uc744 \ubc1b\uc2b5\ub2c8\ub2e4. %pip install -U langchain-openai <p>API key \ub97c \uc14b\ud305\ud569\ub2c8\ub2e4. OPENAI \uc5d0\uc11c \ubc1c\uae09\ubc1b\uc544\uc624\uc138\uc694</p> In\u00a0[\u00a0]: Copied! <pre>import getpass\nimport os\n\n\ndef _set_env(var: str):\n    if not os.environ.get(var):\n        os.environ[var] = getpass.getpass(f\"{var}: \")\n\n\n_set_env(\"OPENAI_API_KEY\")\n</pre> import getpass import os   def _set_env(var: str):     if not os.environ.get(var):         os.environ[var] = getpass.getpass(f\"{var}: \")   _set_env(\"OPENAI_API_KEY\") <pre>OPENAI_API_KEY: \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n</pre> <p>LangSmith \ub3c4 \uc14b\uc5c5\uc744 \ud558\uaca0\uc2b5\ub2c8\ub2e4. \uc55e\uc73c\ub85c \uc791\uc131\ud560 LangGraph \uc758 \ub3d9\uc791\uc744 \ucd94\uc801\ud558\uc5ec \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p> <p>LangSmith \uc5d0 \ub300\ud55c \ub0b4\uc6a9\uc740 \ud29c\ud1a0\ub9ac\uc5bc \ubb38\uc11c \ub97c \ucc38\uc870\ud558\uc138\uc694</p> In\u00a0[\u00a0]: Copied! <pre>os.environ[\"LANGCHAIN_TRACING_V2\"]=\"true\"\n\n_set_env(\"LANGCHAIN_API_KEY\")\n</pre> os.environ[\"LANGCHAIN_TRACING_V2\"]=\"true\"  _set_env(\"LANGCHAIN_API_KEY\") <pre>LANGCHAIN_API_KEY: \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n</pre> In\u00a0[\u00a0]: Copied! <pre>from typing import Annotated\n\nfrom langchain_openai import ChatOpenAI\nfrom typing_extensions import TypedDict\n\nfrom langgraph.graph import StateGraph\nfrom langgraph.graph.message import add_messages\n\n\n# 1. State \ub97c \uc815\uc758\ud569\ub2c8\ub2e4.\nclass State(TypedDict):\n    messages: Annotated[list, add_messages]\n\ngraph_builder = StateGraph(State)\n\n# 2. \ub178\ub4dc\ub97c \uc815\uc758\ud569\ub2c8\ub2e4.\nllm = ChatOpenAI(model=\"gpt-4o-mini\")\ndef chatbot(state: State):\n    return {\"messages\": [llm.invoke(state[\"messages\"])]}\n\n# 3. \uadf8\ub798\ud504\ub97c \uc815\uc758\ud569\ub2c8\ub2e4.\n# The first argument is the unique node name\n# The second argument is the function or object that will be called whenever\n# the node is used.\ngraph_builder.add_node(\"chatbot\", chatbot)\ngraph_builder.set_entry_point(\"chatbot\")\ngraph_builder.set_finish_point(\"chatbot\")\ngraph = graph_builder.compile()\n</pre> from typing import Annotated  from langchain_openai import ChatOpenAI from typing_extensions import TypedDict  from langgraph.graph import StateGraph from langgraph.graph.message import add_messages   # 1. State \ub97c \uc815\uc758\ud569\ub2c8\ub2e4. class State(TypedDict):     messages: Annotated[list, add_messages]  graph_builder = StateGraph(State)  # 2. \ub178\ub4dc\ub97c \uc815\uc758\ud569\ub2c8\ub2e4. llm = ChatOpenAI(model=\"gpt-4o-mini\") def chatbot(state: State):     return {\"messages\": [llm.invoke(state[\"messages\"])]}  # 3. \uadf8\ub798\ud504\ub97c \uc815\uc758\ud569\ub2c8\ub2e4. # The first argument is the unique node name # The second argument is the function or object that will be called whenever # the node is used. graph_builder.add_node(\"chatbot\", chatbot) graph_builder.set_entry_point(\"chatbot\") graph_builder.set_finish_point(\"chatbot\") graph = graph_builder.compile() <p>\ucc38\uace0</p> <p>\uac00\uc7a5 \ucc98\uc74c \ud574\uc57c\ud560 \uc77c\uc744 <code>State</code> \ub97c \uc815\uc758\ud558\ub294 \uac83 \uc785\ub2c8\ub2e4. <code>State</code> \ub294 \uadf8\ub798\ud504\uc758 \uc2a4\ud0a4\ub9c8\ub97c \uac00\uc9c0\uace0 \uc788\uace0, \uc0c1\ud0dc\ub97c \uc5c5\ub370\uc774\ud2b8\ub791 \ub9ac\ub4c0\uc11c \ud568\uc218\ub4e4\uc744 \ubd99\uc785\ub2c8\ub2e4.</p> <p>\uc774\ubc88 \uc608\uc2dc\uc5d0\uc11c\ub294 <code>messages</code>\ub9cc \uac00\uc9c0\uace0 \uc788\ub294<code>TypedDict</code> \uac00 <code>State</code> \uc785\ub2c8\ub2e4. <code>messages</code>  \ub294 add_messages \ub9ac\ub4c0\uc11c \ud568\uc218\ub97c \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4. LangGraph \uc5d0\uc11c\ub294 \uc0c8\ub85c\uc6b4 \uba54\uc138\uc9c0\ub97c \ucd94\uac00\ud558\uac70\ub098 \ub36e\uc5b4\uc4f0\ub294 \uac83\uc774 \uac00\ub2a5\ud569\ub2c8\ub2e4.</p> <p>\uc790\uc138\ud55c \ub0b4\uc6a9\uc740 \ucee8\uc149\uac00\uc774\ub4dc\ub97c \ucc38\uace0\ud558\uc138\uc694.</p> <ol> <li>\ubaa8\ub4e0 <code>node</code> \ub294 \uc55e\uc73c\ub85c \ud604\uc7ac <code>State</code> \ub97c \ubc1b\uc544\uc11c \uc5c5\ub370\uc774\ud2b8\ud558\uace0 \ub9ac\ud134\ud569\ub2c8\ub2e4.</li> <li><code>messages</code>\ub294 \ud604\uc7ac \ub9ac\uc2a4\ud2b8\uc5d0 appended \ub420 \uac83\uc785\ub2c8\ub2e4, <code>add_messages</code> \ud568\uc218\ub97c <code>Annotated</code> \uc5d0 \ucd94\uac00 \ud588\uae30 \ub54c\ubb38\uc774\uace0\uc694, \ucc57\ubd07\uc774\ub2c8\uae4c \uba54\uc138\uc9c0\uac00 \uc313\uc5ec\uc57c \uaca0\uc8e0.</li> </ol> <p>\uc774\uc81c \"<code>chatbot</code>\" \ub178\ub4dc\ub97c \ucd94\uac00\ud569\ub2c8\ub2e4.</p> <p><code>chatbot</code> \ub178\ub4dc\ub294 \ud604\uc7ac <code>State</code> \ub97c \uc778\ud48b\uc73c\ub85c \ubc1b\uc544\uc11c \uc5c5\ub370\uc774\ud2b8\ud558\uace0 \ub9ac\ud134\ud569\ub2c8\ub2e4. \uc2e4\uc81c\ub85c\ub294 'State' \uc758 'messages' \uc2a4\ud0a4\ub9c8\uac00 \uc5c5\ub370\uc774\ud2b8\uac00 \ub418\uaca0\uc8e0. LangGraph \uc758 \uae30\ubcf8 \ud328\ud134\uc785\ub2c8\ub2e4.</p> <p>\uc774\uc81c <code>entry</code> \uc640 'finish' \ud3ec\uc778\ud2b8\ub97c \ucd94\uac00\ud574\uc11c \uc2dc\uc791\uc810\uacfc \ub05d\uc744 \ub9cc\ub4e4\uc5b4 \uc90d\ub2c8\ub2e4.</p> <p><code>finish</code> \ud3ec\uc778\ud2b8\ub294 \uadf8\ub798\ud504\uac00 \"\uc5b8\uc81c\ub098 \uc774 \ub178\ub4dc\uac00 \uc218\ud589\uc911\uc77c\ub54c \ub05d\ub0bc \uc218 \uc788\uc74c\uc744 \uc54c\ub9bd\ub2c8\ub2e4. (any time this node is run, you can exit.)\"</p> <p>\"<code>compile()</code>\" \uae4c\uc9c0 \ubd88\ub7ec\uc918\uc57c \uc0ac\uc6a9 \uac00\ub2a5 \ud569\ub2c8\ub2e4. \"<code>CompiledGraph</code>\" \uac00 \ub418\uc5b4\uc57c \ud638\ucd9c\uc774 \uac00\ub2a5\ud569\ub2c8\ub2e4.</p> <p>\uc2dc\uac01\ud654\ud574\uc11c \uadf8\ub798\ud504\ub97c \ubcfc \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. <code>get_graph</code>&amp; <code>draw</code> \ud568\uc218\ub85c \uadf8\ub824\ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p> In\u00a0[\u00a0]: Copied! <pre>from IPython.display import Image, display\n\ntry:\n    display(Image(graph.get_graph().draw_mermaid_png()))\nexcept Exception:\n    # This requires some extra dependencies and is optional\n    pass\n</pre> from IPython.display import Image, display  try:     display(Image(graph.get_graph().draw_mermaid_png())) except Exception:     # This requires some extra dependencies and is optional     pass <p>\uc774\uc81c \uc218\ud589\uc2dc\ucf1c \ubcf4\uc8e0.</p> <p>Tip:  \"quit\", \"exit\", or \"q\". \ub97c \uc785\ub825\ud574\uc11c \ub05d\ub0bc \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p> In\u00a0[\u00a0]: Copied! <pre>while True:\n    user_input = input(\"User: \")\n    if user_input.lower() in [\"quit\", \"exit\", \"q\"]:\n        print(\"Goodbye!\")\n        break\n    for event in graph.stream({\"messages\": (\"user\", user_input)}):\n        for value in event.values():\n            print(\"Assistant:\", value[\"messages\"][-1].content)\n</pre> while True:     user_input = input(\"User: \")     if user_input.lower() in [\"quit\", \"exit\", \"q\"]:         print(\"Goodbye!\")         break     for event in graph.stream({\"messages\": (\"user\", user_input)}):         for value in event.values():             print(\"Assistant:\", value[\"messages\"][-1].content) <pre>User: \uc800\ub141 \uba54\ub274 \ucd94\ucc9c \uc880\nAssistant: \uc800\ub141 \uba54\ub274\ub85c \uba87 \uac00\uc9c0 \ucd94\ucc9c\ud574\ub4dc\ub9b4\uac8c\uc694!\n\n1. **\ubd88\uace0\uae30**: \ub2ec\ucf64\ud558\uace0 \uc9ed\uc9e4\ud55c \uc18c\uace0\uae30 \ubd88\uace0\uae30\ub97c \uc308 \ucc44\uc18c\uc640 \ud568\uaed8 \ub4dc\uc2dc\uba74 \uc88b\uc2b5\ub2c8\ub2e4.\n2. **\ube44\ube54\ubc25**: \ub2e4\uc591\ud55c \uc57c\ucc44\uc640 \uace0\uae30\ub97c \ub123\uace0 \uace0\ucd94\uc7a5\uacfc \ud568\uaed8 \ube44\ubcbc \uba39\ub294 \ube44\ube54\ubc25\uc740 \uc601\uc591\uac00\ub3c4 \ub192\uace0 \ub9db\uc788\uc5b4\uc694.\n3. **\uae40\uce58\ucc0c\uac1c**: \uad6c\uc218\ud55c \uae40\uce58\ucc0c\uac1c\uc5d0 \ubc25 \ud55c \uacf5\uae30\uba74 \uc18d\uc774 \ub4e0\ub4e0\ud574\uc9d1\ub2c8\ub2e4.\n4. **\uce58\ud0a8**: \ubc14\uc0ad\ud55c \ud504\ub77c\uc774\ub4dc \uce58\ud0a8\uc774\ub098 \ub9e4\ucf64\ud55c \uc591\ub150 \uce58\ud0a8\ub3c4 \uc88b\uc740 \uc120\ud0dd\uc785\ub2c8\ub2e4.\n5. **\ud574\ubb3c\ud30c\uc804**: \ud574\ubb3c\uacfc \ud30c\uac00 \uac00\ub4dd\ud55c \uc804\uc740 \uac04\ub2e8\ud558\uba74\uc11c\ub3c4 \ub9db\uc788\ub294 \uc800\ub141 \uba54\ub274\uc785\ub2c8\ub2e4.\n6. **\ud30c\uc2a4\ud0c0**: \ud06c\ub9bc \uc18c\uc2a4\ub098 \ud1a0\ub9c8\ud1a0 \uc18c\uc2a4\ub85c \uac04\ub2e8\ud558\uac8c \ub9cc\ub4e4 \uc218 \uc788\ub294 \ud30c\uc2a4\ud0c0\ub3c4 \ucd94\ucc9c\ud574\uc694.\n7. **\uc0d0\ub7ec\ub4dc**: \uac00\ubcbc\uc6b4 \uc800\ub141\uc744 \uc6d0\ud558\uc2e0\ub2e4\uba74 \uc2e0\uc120\ud55c \ucc44\uc18c\uc640 \ub2e8\ubc31\uc9c8\uc744 \uacc1\ub4e4\uc778 \uc0d0\ub7ec\ub4dc\ub3c4 \uc88b\uc2b5\ub2c8\ub2e4.\n\n\uc5b4\ub5a4 \uba54\ub274\uac00 \ub9c8\uc74c\uc5d0 \ub4dc\uc2dc\ub098\uc694?\nUser: q\nGoodbye!\n</pre> In\u00a0[\u00a0]: Copied! <pre>%%capture --no-stderr\n%pip install -U tavily-python\n%pip install -U langchain_community\n</pre> %%capture --no-stderr %pip install -U tavily-python %pip install -U langchain_community In\u00a0[\u00a0]: Copied! <pre>_set_env(\"TAVILY_API_KEY\")\n</pre> _set_env(\"TAVILY_API_KEY\") <pre>TAVILY_API_KEY: \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n</pre> <p><code>tool</code> \uc744 \uc815\uc758\ud558\uace0, \uc0ac\uc6a9\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4</p> In\u00a0[\u00a0]: Copied! <pre>from langchain_community.tools.tavily_search import TavilySearchResults\n\ntool = TavilySearchResults(max_results=2)\ntools = [tool]\ntool.invoke(\"What's a 'node' in LangGraph?\")\n</pre> from langchain_community.tools.tavily_search import TavilySearchResults  tool = TavilySearchResults(max_results=2) tools = [tool] tool.invoke(\"What's a 'node' in LangGraph?\") Out[\u00a0]: <pre>[{'url': 'https://medium.com/@cplog/introduction-to-langgraph-a-beginners-guide-14f9be027141',\n  'content': 'Nodes: Nodes are the building blocks of your LangGraph. Each node represents a function or a computation step. You define nodes to perform specific tasks, such as processing input, making ...'},\n {'url': 'https://saksheepatil05.medium.com/demystifying-langgraph-a-beginner-friendly-dive-into-langgraph-concepts-5ffe890ddac0',\n  'content': 'Nodes (Tasks): Nodes are like the workstations on the assembly line. Each node performs a specific task on the product. In LangGraph, nodes are Python functions that take the current state, do some work, and return an updated state. Next, we define the nodes, each representing a task in our sandwich-making process.'}]</pre> <p>\uac80\uc0c9\uacb0\uacfc \ubbf8\ub514\uc5c4\uc5d0\uc11c \uad00\ub828 \uae00\uc744 \ucc3e\uc558\uace0, \ub0b4\uc6a9\uc744 parsing \ud574\uc11c text \uc758 \ud615\ud0dc\ub85c \ub9ac\ud134\ud574 \uc90d\ub2c8\ub2e4.</p> <p>\uc774\uc81c Tavily search tool \uc744 \uc704\ucabd 1\ubc88 \ud30c\ud2b8\uc5d0\uc11c \ub9cc\ub4e0 chatbot langgraph \uc5d0 \uc774\uc5b4 \ubd99\uc5ec\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.</p> <ol> <li><code>tool</code>\uc744 \uc815\uc758\ud569\ub2c8\ub2e4.</li> <li><code>llm.bind_tools()</code> \ub97c \uc774\uc6a9\ud574\uc11c tool \uc744 \ucd94\uac00\ud574\uc90d\ub2c8\ub2e4.</li> <li><code>ToolNode</code>\ub97c \uc815\uc758\ud558\uace0 \ub178\ub4dc\ub85c \ucd94\uac00\ud574\uc90d\ub2c8\ub2e4.</li> <li><code>add_conditional_edges()</code> &amp; <code>tools_condition</code> \uc744 \ucd94\uac00\ud574\uc11c LLM\uc774 \uc9c1\uc811 tool \uc744 \uc0ac\uc6a9\ud560\uc9c0 \uc548\ud560\uc9c0 \ud310\ub2e8\ud558\ub3c4\ub85d \ud569\ub2c8\ub2e4.</li> </ol> <ul> <li><code>add_conditional_edge()</code> \ub294 end point \uac00 \ud3ec\ud568\ub418\uc5b4 \uc788\uae30 \ub54c\ubb38\uc5d0, \uc9c1\uc811 \uc9c0\uc815\ud560 \ud544\uc694\uac00 \uc5c6\uc2b5\ub2c8\ub2e4.</li> </ul> In\u00a0[\u00a0]: Copied! <pre># \ud30c\ud2b8 1 \uc5d0\uc11c \uc774\uc5b4\uc9c0\ub294 \ucf54\ub4dc \uc785\ub2c8\ub2e4\ngraph_builder = StateGraph(State)\n\nfrom langchain_community.tools.tavily_search import TavilySearchResults\nfrom langgraph.prebuilt import ToolNode, tools_condition\nfrom langgraph.graph import START\n\n\ntool = TavilySearchResults(max_results=2)\ntools = [tool]\nllm_with_tools = llm.bind_tools(tools)\n\ndef chatbot(state: State):\n    return {\"messages\": [llm_with_tools.invoke(state[\"messages\"])]}\n\ngraph_builder.add_node(\"chatbot\", chatbot)\n\ntool_node = ToolNode(tools=[tool])\ngraph_builder.add_node(\"tools\", tool_node)\n\ngraph_builder.add_conditional_edges(\n    \"chatbot\",\n    tools_condition,\n)\n\ngraph_builder.add_edge(\"tools\", \"chatbot\")\n\n#graph_builder.set_entry_point(\"chatbot\")\ngraph_builder.add_edge(START, \"chatbot\")\n\n# conditional_edges() \uac00 \uc54c\uc544\uc11c \ub05d\ub0bc\uc218 \uc788\uae30 \ub54c\ubb38\uc5d0 \ub05d\uc744 \uc9c0\uc815 \uc548 \ud574\uc918\ub3c4 \ub429\ub2c8\ub2e4.\n# graph_builder.set_finish_point(\"chatbot\")\n\ngraph = graph_builder.compile()\n</pre> # \ud30c\ud2b8 1 \uc5d0\uc11c \uc774\uc5b4\uc9c0\ub294 \ucf54\ub4dc \uc785\ub2c8\ub2e4 graph_builder = StateGraph(State)  from langchain_community.tools.tavily_search import TavilySearchResults from langgraph.prebuilt import ToolNode, tools_condition from langgraph.graph import START   tool = TavilySearchResults(max_results=2) tools = [tool] llm_with_tools = llm.bind_tools(tools)  def chatbot(state: State):     return {\"messages\": [llm_with_tools.invoke(state[\"messages\"])]}  graph_builder.add_node(\"chatbot\", chatbot)  tool_node = ToolNode(tools=[tool]) graph_builder.add_node(\"tools\", tool_node)  graph_builder.add_conditional_edges(     \"chatbot\",     tools_condition, )  graph_builder.add_edge(\"tools\", \"chatbot\")  #graph_builder.set_entry_point(\"chatbot\") graph_builder.add_edge(START, \"chatbot\")  # conditional_edges() \uac00 \uc54c\uc544\uc11c \ub05d\ub0bc\uc218 \uc788\uae30 \ub54c\ubb38\uc5d0 \ub05d\uc744 \uc9c0\uc815 \uc548 \ud574\uc918\ub3c4 \ub429\ub2c8\ub2e4. # graph_builder.set_finish_point(\"chatbot\")  graph = graph_builder.compile() <p>\uc774\ub807\uac8c \uc0dd\uc131\ub41c \uadf8\ub798\ud504\ub97c \ubcf4\uba74 \uc544\ub798\uc640 \uac19\uc774 \ud45c\ud604\ub429\ub2c8\ub2e4. conditional edge \uac00 \uc0dd\uaca8\uc11c tool\uc744 \uc0ac\uc6a9\ud558\uac70\ub098 \uc548\ud558\uac70\ub098, \uacb0\uc815\uc774 \uac00\ub2a5\ud569\ub2c8\ub2e4.</p> In\u00a0[\u00a0]: Copied! <pre>from IPython.display import Image, display\n\ntry:\n    display(Image(graph.get_graph().draw_mermaid_png()))\nexcept Exception:\n    # This requires some extra dependencies and is optional\n    pass\n</pre> from IPython.display import Image, display  try:     display(Image(graph.get_graph().draw_mermaid_png())) except Exception:     # This requires some extra dependencies and is optional     pass <p>chatbot \uc758 \ud615\ud0dc\ub85c \ucc44\ud305\uc744 \ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \uacfc\uc5f0 tool\uc744 \uc798 \uc0ac\uc6a9\ud574\uc11c \ub300\ub2f5\ud560 \uc218 \uc788\uc744\uae4c\uc694?</p> In\u00a0[\u00a0]: Copied! <pre>from langchain_core.messages import BaseMessage\n\nwhile True:\n    user_input = input(\"User: \")\n    if user_input.lower() in [\"quit\", \"exit\", \"q\"]:\n        print(\"Goodbye!\")\n        break\n    for event in graph.stream({\"messages\": [(\"user\", user_input)]}):\n        for value in event.values():\n            if isinstance(value[\"messages\"][-1], BaseMessage):\n                print(\"Assistant:\", value[\"messages\"][-1].content)\n</pre> from langchain_core.messages import BaseMessage  while True:     user_input = input(\"User: \")     if user_input.lower() in [\"quit\", \"exit\", \"q\"]:         print(\"Goodbye!\")         break     for event in graph.stream({\"messages\": [(\"user\", user_input)]}):         for value in event.values():             if isinstance(value[\"messages\"][-1], BaseMessage):                 print(\"Assistant:\", value[\"messages\"][-1].content) <pre>User: \uc800\ub141 \uba54\ub274 \ucd94\ucc9c \uc880\nAssistant: \uc800\ub141 \uba54\ub274\ub85c\ub294 \uc5ec\ub7ec \uac00\uc9c0\uac00 \uc788\uaca0\uc9c0\ub9cc, \uba87 \uac00\uc9c0 \ucd94\ucc9c\ub4dc\ub9b4\uac8c\uc694:\n\n1. **\ube44\ube54\ubc25**: \ub2e4\uc591\ud55c \ucc44\uc18c\uc640 \uace0\uae30, \uacc4\ub780\uc744 \uc11e\uc5b4 \uba39\ub294 \uac74\uac15\ud55c \ud55c \uadf8\ub987 \uc694\ub9ac\uc785\ub2c8\ub2e4.\n2. **\uae40\uce58\ucc0c\uac1c**: \ub728\ub048\ud558\uace0 \ub9e4\ucf64\ud55c \uae40\uce58\ucc0c\uac1c\ub294 \ubc25\uacfc \ud568\uaed8 \uba39\uae30 \uc88b\uc740 \uba54\ub274\uc785\ub2c8\ub2e4.\n3. **\ubd88\uace0\uae30**: \uc591\ub150\ud55c \uc18c\uace0\uae30\ub97c \uad6c\uc6cc\uc11c \uba39\ub294 \ubd88\uace0\uae30\ub294 \uac04\ub2e8\ud558\uba74\uc11c\ub3c4 \ub9db\uc788\ub294 \uc800\ub141\uc73c\ub85c \uc88b\uc2b5\ub2c8\ub2e4.\n4. **\ud574\ubb3c\ud30c\uc804**: \ud574\ubb3c\uacfc \ud30c\ub97c \ub123\uc5b4 \ubd80\uce5c \uc804\uc744 \ub9c9\uac78\ub9ac\uc640 \ud568\uaed8 \uc990\uae30\uba74 \uc88b\uc2b5\ub2c8\ub2e4.\n5. **\ub2ed\uac08\ube44**: \ub9e4\ucf64\ud55c \uc591\ub150\uc758 \ub2ed\uace0\uae30\uc640 \ucc44\uc18c\ub97c \ubcf6\uc544 \uba39\ub294 \ub2ed\uac08\ube44\ub3c4 \ud6cc\ub96d\ud55c \uc120\ud0dd\uc785\ub2c8\ub2e4.\n\n\uc5b4\ub5a4 \uba54\ub274\uac00 \ub04c\ub9ac\uc2dc\ub098\uc694? \ucd94\uac00\uc801\uc73c\ub85c \ub2e4\ub978 \ucd94\ucc9c\uc774 \ud544\uc694\ud558\uc2dc\uba74 \ub9d0\uc500\ud574 \uc8fc\uc138\uc694!\nUser: \uc800\ub141 \uba54\ub274 \uc694\uc998 \uc720\ud589\ud558\ub294 \uac83\uc744 \uc6f9\uc5d0\uc11c \uac80\uc0c9\ud574\uc11c \ucd94\ucc9c\ud574\uc918\nAssistant: \nAssistant: [{\"url\": \"https://ranknews.co.kr/\uc800\ub141\uba54\ub274-\ucd94\ucc9c-best20/\", \"content\": \"\uc624\ub298\uc740 \uc800\ub141 \uba54\ub274 \ucd94\ucc9c BEST 20\uc5d0 \ub300\ud574\uc11c \uc54c\ub824\ub4dc\ub9ac\ub824\uace0 \ud569\ub2c8\ub2e4. \uc0ac\uc2e4 \uc800\ub3c4 \ud1f4\uadfc\ud558\uace0 \ub098\uba74 \ub9cc\uc0ac\uac00 \uadc0\ucc2e\uc544\uc9c8 \ub54c\uac00 \ub9ce\uc544\uc11c, \uac00\uc7a5 \ub9cc\uc871\uc2a4\ub7ec\uc6b4 \uc800\ub141 \uba54\ub274\ub97c \ube60\ub974\uac8c \uace0\ub97c \uc218 \uc788\ub3c4\ub85d \uc900\ube44\ud574 \ubcf4\uc558\uc2b5\ub2c8\ub2e4. \uc790\ucde8 5\ub144 \ucc28\uc774\ub2c8 \uc800\ub97c \ubbff\uc5b4\ubcf4\uc154\ub3c4 \uc88b\uc2b5\ub2c8\ub2e4. \ubc30\ub2ec\uc758 \ubbfc\uc871\uc774\ub77c\ub294 ...\"}, {\"url\": \"https://m.blog.naver.com/next200208/222957667466\", \"content\": \"2023 \uc678\uc2dd\uc5c5\ud2b8\ub80c\ub4dc\ub294 2020\ub144\ubd80\ud130 \uc9c4\ud589\ud574\uc628 2022 \ubc30\ubbfc \uc678\uc2dd\uc5c5 \ucee8\ud37c\ub7f0\uc2a4\uc5d0\uc11c \ucd5c\ucd08 \uacf5\uac1c\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uc62c\ud574 \ud589\uc0ac\ub294 '22.12.13 (\ud654)~12.14 (\uc218) \uc591\uc77c\uac04, \ubc14\uc05c \uc0ac\uc7a5\ub2d8\ub4e4\uc774 \uc27d\uac8c \uc811\uadfc\ud558\uace0\uc790 \uc5ed\uc2dc \uc628\ub77c\uc778\uc73c\ub85c \uc9c4\ud589\ub418\uc5c8\ub294\ub370\uc694. \uc774\ubc88 \ucee8\ud37c\ub7f0\uc2a4\uc5d0 \uae40\ub09c\ub3c4 \uad50\uc218\uac00 \uc9c1\uc811 \ub098\uc640, \ubb34\ub824 80\ubd84 ...\"}]\nAssistant: \uc694\uc998 \uc720\ud589\ud558\ub294 \uc800\ub141 \uba54\ub274 \ucd94\ucc9c\uc5d0 \ub300\ud55c \uc815\ubcf4\ub97c \ucc3e\uc558\uc2b5\ub2c8\ub2e4. \uc544\ub798 \ub9c1\ud06c\ub4e4\uc744 \ud1b5\ud574 \ub2e4\uc591\ud55c \ucd94\ucc9c \uba54\ub274\ub97c \ud655\uc778\ud574\ubcf4\uc2e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n1. [\uc800\ub141 \uba54\ub274 \ucd94\ucc9c BEST 20](https://ranknews.co.kr/\uc800\ub141\uba54\ub274-\ucd94\ucc9c-best20/): \uc5ec\ub7ec \uac00\uc9c0 \uc800\ub141 \uba54\ub274\ub97c \uc18c\uac1c\ud558\uba70, \ud2b9\ud788 \ud1f4\uadfc \ud6c4 \uc27d\uac8c \ub9cc\ub4e4 \uc218 \uc788\ub294 \uba54\ub274\ub4e4\uc744 \uc81c\uc548\ud569\ub2c8\ub2e4.\n\n2. [2023 \uc678\uc2dd\uc5c5 \ud2b8\ub80c\ub4dc](https://m.blog.naver.com/next200208/222957667466): 2023\ub144 \uc678\uc2dd\uc5c5 \ud2b8\ub80c\ub4dc\ub97c \ub2e4\ub8e8\uace0 \uc788\uc73c\uba70, \uc62c\ud574\uc758 \uc778\uae30 \uba54\ub274\uc640 \uc678\uc2dd \uc5c5\uacc4\uc758 \ubcc0\ud654\uc5d0 \ub300\ud55c \uc815\ubcf4\ub3c4 \ud3ec\ud568\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.\n\n\uc774 \ub9c1\ud06c\ub4e4\uc744 \ucc38\uace0\ud558\uc5ec \uc694\uc998 \uc778\uae30 \uc788\ub294 \uc800\ub141 \uba54\ub274\ub97c \uc120\ud0dd\ud574 \ubcf4\uc138\uc694!\nUser: q\nGoodbye!\n</pre> <ol> <li>\uccab \uc9c8\ubb38\uc778 \uc800\ub141 \uba54\ub274 \ucd94\ucc9c \uc880 \uc774\ub77c\ub294 \uc9c8\ubb38\uc5d0 \ub300\ud574\uc11c\ub294 tavily \uc758 \uac80\uc0c9 \uc5c6\uc774 \ub300\ub2f5\uc744 \ud588\uc2b5\ub2c8\ub2e4.</li> </ol> <ul> <li>\uc544\ub798 Langsmith \ub85c \ucd94\uc801\ub41c \uacb0\uacfc\ub97c \ucca8\ubd80\ud569\ub2c8\ub2e4.</li> </ul> <p></p> <ol> <li>\ucd94\uac00 \uc9c8\ubb38\uc778 \uc800\ub141 \uba54\ub274 \uc694\uc998 \uc720\ud589\ud558\ub294 \uac83\uc744 \uc6f9\uc5d0\uc11c \uac80\uc0c9\ud574\uc11c \ucd94\ucc9c\ud574\uc918 \uc5d0 \ub300\ud574\uc11c\ub294 tavily \uac80\uc0c9 \uacb0\uacfc\uc640 \ud568\uaed8 \ub2f5\ubcc0\uc744 \ud574 \uc92c\uc2b5\ub2c8\ub2e4.</li> </ol> <ul> <li>\uc5ed\uc2dc\ub098, \uc544\ub798 Langsmith \ub85c \ucd94\uc801\ub41c \uacb0\uacfc\ub97c \ucca8\ubd80\ud569\ub2c8\ub2e4.</li> </ul> <p></p> <p>\uac80\uc0c9\uacb0\uacfc platum.kr \ub3c4\uba54\uc778\uc758 \uc678\uc2dd\uc5c5 \ud2b8\ub80c\ub4dc \uae00\uc744 \ucc38\uace0\ud574\uc11c \ub300\ub2f5\uc744 \ud588\uc2b5\ub2c8\ub2e4. \uc815\ub9d0\ub85c \ub9cc\uc871\uc2a4\ub7ec\uc6b4 \uc800\ub141 \uba54\ub274\ub97c \ucd94\ucc9c\ud574\uc92c\ub294\uc9c0\ub294 \ubaa8\ub974\uaca0\uc9c0\ub9cc, \uc5b4\uca0c\ub4e0 \ub3c4\uad6c\uc758 \ub3c4\uc6c0\uacfc \ud568\uaed8 \ub2f5\ubcc0\uc744 \ud588\uc2b5\ub2c8\ub2e4.</p> <p>\uc6d0\ud558\ub358\ub300\ub85c \uc6f9\uc11c\uce6d \ub3c4\uad6c\ub97c \uc798 \uc950\uc5b4 \uc8fc\uc5c8\uad70\uc694!</p> <p>\uc774\ub7f0\uac83\uc774 \uc5b4\ub5bb\uac8c \uac00\ub2a5\ud560\uae4c\uc694...??</p> <ul> <li>\ucd94\uc801\uc744 \ubcf4\uba74, tavily \uc5d0 \ub0a0\ub9b4 \ucffc\ub9ac\ub97c LLM (\uc5ec\uae30\uc11c\ub294 gpt-4o-mini) \uc774 \uc54c\uc544\uc11c \ubf51\uc544\uc11c \uc694\uccad\ud558\uace0 \uc635\ub2c8\ub2e4.</li> <li>\uc6b0\ub9ac\uac00 \uc0ac\uc6a9\ud55c LLM\uc740 ChatOpenAI, LangChain \uc758 chat \ubaa8\ub378\uc785\ub2c8\ub2e4. \uc5ec\uae30\uc11c tool calling \uc744 \uc9c0\uc6d0\ud569\ub2c8\ub2e4.</li> <li>\uc544\ub798 \ub9c1\ud06c\ub97c \ubcf4\uba74, chat \ubaa8\ub378\ub9c8\ub2e4 tool calling \uc758 \uc9c0\uc6d0 \uc5ec\ubd80\ub97c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.<ul> <li>\ucc38\uc870 - https://python.langchain.com/docs/integrations/chat/?ref=blog.langchain.dev</li> </ul> </li> </ul> In\u00a0[\u00a0]: Copied! <pre>from langgraph.checkpoint.memory import MemorySaver\n\nmemory = MemorySaver()\n</pre> from langgraph.checkpoint.memory import MemorySaver  memory = MemorySaver() <p>\ucc38\uace0 \uc774 \ubb38\uc11c\uc5d0\uc11c\ub294 In-memory checkpointer \ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \uc5ec\uae30\uc11c\uc758 \"in-memory\" \ub294 \ud504\ub85c\uc138\uc2a4\uc758 \uba54\ubaa8\ub9ac, RAM \uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \ud29c\ud1a0\ub9ac\uc5bc \uc790\ub8cc\ub85c\uc11c\ub294 \uc774\uc815\ub3c4\ub85c \ucda9\ubd84\ud558\uc9c0\ub9cc, \ub2f9\uc5f0\ud788 \ud504\ub85c\uc138\uc2a4\uac00 \uaebc\uc9c0\uba74, \uc815\ubcf4\uac00 \ubaa8\ub450 \ub0a0\uc544\uac11\ub2c8\ub2e4. \uc0c1\uc5c5 (production) \ub808\ubca8\uc5d0\uc11c\ub294 <code>SqliteSaver</code> \ub098 <code>PostgresSaver</code>\ub97c \uc0ac\uc6a9\ud558\uace0 DB \uc5d0 \uc5f0\uacb0\ud558\ub294 \uac83\uc744 \ucd94\ucc9c\ud569\ub2c8\ub2e4.</p> In\u00a0[\u00a0]: Copied! <pre># \ud30c\ud2b82 \uc5d0\uc11c \uc791\uc131\ud55c \uadf8\ub798\ud504\uc5d0 checkpointer \ub9cc \ucd94\uac00\ud558\uc5ec \ub2e4\uc2dc \ub9cc\ub4e7\ub2c8\ub2e4.\n\ngraph = graph_builder.compile(checkpointer=memory)\n</pre> # \ud30c\ud2b82 \uc5d0\uc11c \uc791\uc131\ud55c \uadf8\ub798\ud504\uc5d0 checkpointer \ub9cc \ucd94\uac00\ud558\uc5ec \ub2e4\uc2dc \ub9cc\ub4e7\ub2c8\ub2e4.  graph = graph_builder.compile(checkpointer=memory) <p>\uadf8\ub798\ud504\ub97c \uc2dc\uac01\ud654\ud574\ubcf4\uba74, \ub178\ub4dc\uac00 \ub2ec\ub77c\uc9c4 \uac83\uc740 \uc5c6\uc2b5\ub2c8\ub2e4.</p> In\u00a0[\u00a0]: Copied! <pre>from IPython.display import Image, display\n\ntry:\n    display(Image(graph.get_graph().draw_mermaid_png()))\nexcept Exception:\n    # This requires some extra dependencies and is optional\n    pass\n</pre> from IPython.display import Image, display  try:     display(Image(graph.get_graph().draw_mermaid_png())) except Exception:     # This requires some extra dependencies and is optional     pass <p>\ub300\ud654\uc5d0 \uc4f0\ub808\ub4dc \uc544\uc774\ub514\ub97c \ud560\ub2f9\ud558\uace0 \ucc57\ubd07\uc744 \uc0ac\uc6a9\ud574 \ubd05\uc2dc\ub2e4.</p> In\u00a0[\u00a0]: Copied! <pre>config = {\"configurable\": {\"thread_id\": \"1\"}}\n</pre> config = {\"configurable\": {\"thread_id\": \"1\"}} In\u00a0[\u00a0]: Copied! <pre>user_input = \"\uc548\ub155\uc548\ub155, \ub098\ub294 \uc810\uc2ec\uc5d0 \uacbd\uc591\uc2dd \ub3c8\uae4c\uc4f0\ub97c \uba39\uc5c8\uc5b4.\"\n\n# The config is the **second positional argument** to stream() or invoke()!\nevents = graph.stream(\n    {\"messages\": [(\"user\", user_input)]}, config, stream_mode=\"values\"\n)\nfor event in events:\n    event[\"messages\"][-1].pretty_print()\n</pre> user_input = \"\uc548\ub155\uc548\ub155, \ub098\ub294 \uc810\uc2ec\uc5d0 \uacbd\uc591\uc2dd \ub3c8\uae4c\uc4f0\ub97c \uba39\uc5c8\uc5b4.\"  # The config is the **second positional argument** to stream() or invoke()! events = graph.stream(     {\"messages\": [(\"user\", user_input)]}, config, stream_mode=\"values\" ) for event in events:     event[\"messages\"][-1].pretty_print() <pre>================================ Human Message =================================\n\n\uc548\ub155\uc548\ub155, \ub098\ub294 \uc810\uc2ec\uc5d0 \uacbd\uc591\uc2dd \ub3c8\uae4c\uc4f0\ub97c \uba39\uc5c8\uc5b4.\n================================== Ai Message ==================================\n\n\uc548\ub155\ud558\uc138\uc694! \uacbd\uc591\uc2dd \ub3c8\uae4c\uc2a4\ub97c \ub4dc\uc168\ub2e4\ub2c8 \ub9db\uc788\uaca0\ub124\uc694. \ub3c8\uae4c\uc2a4\ub294 \ubc14\uc0ad\ud55c \ud280\uae40\uacfc \ubd80\ub4dc\ub7ec\uc6b4 \uace0\uae30\uac00 \uc870\ud654\ub97c \uc774\ub8e8\uc5b4\uc11c \uc815\ub9d0 \ub9db\uc788\uc8e0. \uc5b4\ub5a4 \uc18c\uc2a4\uc640 \ud568\uaed8 \ub4dc\uc168\ub098\uc694?\n</pre> <p>Note: The config was provided as the second positional argument when calling our graph. It importantly is not nested within the graph inputs (<code>{'messages': []}</code>).</p> <p>Let's ask a followup: see if it remembers your name.</p> In\u00a0[\u00a0]: Copied! <pre>user_input = \"\ub098 \uc810\uc2ec\uc5d0 \ubb50 \uba39\uc5c8\uc9c0?\"\n\n# The config is the **second positional argument** to stream() or invoke()!\nevents = graph.stream(\n    {\"messages\": [(\"user\", user_input)]}, config, stream_mode=\"values\"\n)\nfor event in events:\n    event[\"messages\"][-1].pretty_print()\n</pre> user_input = \"\ub098 \uc810\uc2ec\uc5d0 \ubb50 \uba39\uc5c8\uc9c0?\"  # The config is the **second positional argument** to stream() or invoke()! events = graph.stream(     {\"messages\": [(\"user\", user_input)]}, config, stream_mode=\"values\" ) for event in events:     event[\"messages\"][-1].pretty_print() <pre>================================ Human Message =================================\n\n\ub098 \uc810\uc2ec\uc5d0 \ubb50 \uba39\uc5c8\uc9c0?\n================================== Ai Message ==================================\n\n\uc810\uc2ec\uc5d0 \uacbd\uc591\uc2dd \ub3c8\uae4c\uc2a4\ub97c \ub4dc\uc168\ub2e4\uace0 \ud558\uc168\uc2b5\ub2c8\ub2e4! \uc544\uc8fc \ub9db\uc788\ub294 \uc120\ud0dd\uc774\uc5c8\ub124\uc694. \ub2e4\ub978 \uba54\ub274\ub3c4 \uace0\ub824\ud558\uc168\ub098\uc694?\n</pre> <p>\uc55e\uc120 \ub300\ud654\ub97c \uc798 \uae30\uc5b5\uc744 \ud588\uc2b5\ub2c8\ub2e4. LangSmith trace \ub97c \ubcf4\uc2dc\uba74, \ub300\ud654\uac00 \uc774\uc5b4\uc838 \uc788\ub294 \uac83\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub9c1\ud06c\uc758 \ud654\uba74\uc740 \ucea1\ucc98\ud574\uc11c \uc544\ub798 \ucca8\ubd80\ud569\ub2c8\ub2e4.</p> <p></p> In\u00a0[\u00a0]: Copied! <pre># The only difference is we change the `thread_id` here to \"2\" instead of \"1\"\nevents = graph.stream(\n    {\"messages\": [(\"user\", user_input)]},\n    {\"configurable\": {\"thread_id\": \"2\"}},\n    stream_mode=\"values\",\n)\nfor event in events:\n    event[\"messages\"][-1].pretty_print()\n</pre> # The only difference is we change the `thread_id` here to \"2\" instead of \"1\" events = graph.stream(     {\"messages\": [(\"user\", user_input)]},     {\"configurable\": {\"thread_id\": \"2\"}},     stream_mode=\"values\", ) for event in events:     event[\"messages\"][-1].pretty_print() <pre>================================ Human Message =================================\n\n\ub098 \uc810\uc2ec\uc5d0 \ubb50 \uba39\uc5c8\uc9c0?\n================================== Ai Message ==================================\n\n\uc8c4\uc1a1\ud558\uc9c0\ub9cc, \ub2f9\uc2e0\uc774 \uc810\uc2ec\uc5d0 \ubb34\uc5c7\uc744 \uba39\uc5c8\ub294\uc9c0 \uc54c \uc218 \uc788\ub294 \ubc29\ubc95\uc774 \uc5c6\uc2b5\ub2c8\ub2e4. \ud639\uc2dc \uae30\uc5b5\uc774 \ub098\uc9c0 \uc54a\uac70\ub098 \ub3c4\uc6c0\uc774 \ud544\uc694\ud55c \ub2e4\ub978 \uc9c8\ubb38\uc774 \uc788\uc73c\uc2dc\uba74 \ub9d0\uc500\ud574 \uc8fc\uc138\uc694!\n</pre> <p><code>thread_id</code> \ub97c \ubc14\uafd4\uc8fc\ub2c8, \ub300\ud654\ub97c \uae30\uc5b5\uc744 \ubabb\ud558\ub124\uc694.</p> <p>Checkpoint \uc5d0\uc11c \ubb34\uc2a8 \uc77c\uc774 \uc77c\uc5b4\ub098\uace0 \uc788\ub294\uc9c0 \ubcf4\uace0 \uc2f6\ub2e4\uba74, graph\uc758 <code>state</code> \ub97c <code>get_state(config)</code> \ud568\uc218 \ud638\ucd9c\ud574\uc11c \ubcf4\uba74 \ub429\ub2c8\ub2e4.</p> In\u00a0[\u00a0]: Copied! <pre>snapshot = graph.get_state(config)\nsnapshot\n</pre> snapshot = graph.get_state(config) snapshot Out[\u00a0]: <pre>StateSnapshot(values={'messages': [HumanMessage(content='\uc548\ub155\uc548\ub155, \ub098\ub294 \uc810\uc2ec\uc5d0 \uacbd\uc591\uc2dd \ub3c8\uae4c\uc4f0\ub97c \uba39\uc5c8\uc5b4.', additional_kwargs={}, response_metadata={}, id='e4e5df43-1506-4ed6-b174-c7c46df52c7b'), AIMessage(content='\uc548\ub155\ud558\uc138\uc694! \uacbd\uc591\uc2dd \ub3c8\uae4c\uc2a4\ub97c \ub4dc\uc168\ub2e4\ub2c8 \ub9db\uc788\uaca0\ub124\uc694. \ub3c8\uae4c\uc2a4\ub294 \ubc14\uc0ad\ud55c \ud280\uae40\uacfc \ubd80\ub4dc\ub7ec\uc6b4 \uace0\uae30\uac00 \uc870\ud654\ub97c \uc774\ub8e8\uc5b4\uc11c \uc815\ub9d0 \ub9db\uc788\uc8e0. \uc5b4\ub5a4 \uc18c\uc2a4\uc640 \ud568\uaed8 \ub4dc\uc168\ub098\uc694?', additional_kwargs={'refusal': None}, response_metadata={'token_usage': {'completion_tokens': 53, 'prompt_tokens': 99, 'total_tokens': 152, 'completion_tokens_details': {'reasoning_tokens': 0}}, 'model_name': 'gpt-4o-mini-2024-07-18', 'system_fingerprint': 'fp_483d39d857', 'finish_reason': 'stop', 'logprobs': None}, id='run-26d8ef2f-aedc-4593-b0c7-73bd66d01b2e-0', usage_metadata={'input_tokens': 99, 'output_tokens': 53, 'total_tokens': 152}), HumanMessage(content='\ub098 \uc810\uc2ec\uc5d0 \ubb50 \uba39\uc5c8\uc9c0?', additional_kwargs={}, response_metadata={}, id='82514da5-863d-4a44-a5d7-cd75be780098'), AIMessage(content='\uc810\uc2ec\uc5d0 \uacbd\uc591\uc2dd \ub3c8\uae4c\uc2a4\ub97c \ub4dc\uc168\ub2e4\uace0 \ud558\uc168\uc2b5\ub2c8\ub2e4! \uc544\uc8fc \ub9db\uc788\ub294 \uc120\ud0dd\uc774\uc5c8\ub124\uc694. \ub2e4\ub978 \uba54\ub274\ub3c4 \uace0\ub824\ud558\uc168\ub098\uc694?', additional_kwargs={'refusal': None}, response_metadata={'token_usage': {'completion_tokens': 33, 'prompt_tokens': 168, 'total_tokens': 201, 'completion_tokens_details': {'reasoning_tokens': 0}}, 'model_name': 'gpt-4o-mini-2024-07-18', 'system_fingerprint': 'fp_483d39d857', 'finish_reason': 'stop', 'logprobs': None}, id='run-4826567c-c492-4da9-8a70-daaf7b4bbad1-0', usage_metadata={'input_tokens': 168, 'output_tokens': 33, 'total_tokens': 201})]}, next=(), config={'configurable': {'thread_id': '1', 'checkpoint_ns': '', 'checkpoint_id': '1ef7578b-53c1-62a8-8004-1000dc8fcbeb'}}, metadata={'source': 'loop', 'writes': {'chatbot': {'messages': [AIMessage(content='\uc810\uc2ec\uc5d0 \uacbd\uc591\uc2dd \ub3c8\uae4c\uc2a4\ub97c \ub4dc\uc168\ub2e4\uace0 \ud558\uc168\uc2b5\ub2c8\ub2e4! \uc544\uc8fc \ub9db\uc788\ub294 \uc120\ud0dd\uc774\uc5c8\ub124\uc694. \ub2e4\ub978 \uba54\ub274\ub3c4 \uace0\ub824\ud558\uc168\ub098\uc694?', additional_kwargs={'refusal': None}, response_metadata={'token_usage': {'completion_tokens': 33, 'prompt_tokens': 168, 'total_tokens': 201, 'completion_tokens_details': {'reasoning_tokens': 0}}, 'model_name': 'gpt-4o-mini-2024-07-18', 'system_fingerprint': 'fp_483d39d857', 'finish_reason': 'stop', 'logprobs': None}, id='run-4826567c-c492-4da9-8a70-daaf7b4bbad1-0', usage_metadata={'input_tokens': 168, 'output_tokens': 33, 'total_tokens': 201})]}}, 'step': 4, 'parents': {}}, created_at='2024-09-18T04:44:36.891287+00:00', parent_config={'configurable': {'thread_id': '1', 'checkpoint_ns': '', 'checkpoint_id': '1ef7578b-478e-668c-8003-6304d3ab0c68'}}, tasks=())</pre> In\u00a0[\u00a0]: Copied! <pre>snapshot.next  # (since the graph ended this turn, `next` is empty. If you fetch a state from within a graph invocation, next tells which node will execute next)\n</pre> snapshot.next  # (since the graph ended this turn, `next` is empty. If you fetch a state from within a graph invocation, next tells which node will execute next) Out[\u00a0]: <pre>()</pre> <p>\uc2a4\ub0c5\uc0f7\uc740 \ub118\uaca8\uc900 config (thread_id) \uc758 \ud604\uc7ac state \uac12\uc744 \uac00\uc9c0\uace0 \uc788\uace0\uc694, \ub2e4\uc74c\uc73c\ub85c \uc2e4\ud589\ud560 <code>next</code> \ub178\ub4dc\ub97c \uac00\ub9ac\ud0a4\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc5ec\uae30\uc11c\ub294  <code>__end__</code> \uc5d0 \ub3c4\ub2ec\ud574\uc11c <code>next</code> \uac00 \uc5c6\uc5b4\uc694.</p> <p>\uc5ec\uae30\uae4c\uc9c0 \uccb4\ud06c\ud3ec\uc778\ud2b8\ub97c \ub300\ud654\uc758 \uae30\uc5b5\uc744 \uad6c\ud604\ud558\ub3c4\ub85d \uc0ac\uc6a9\ud588\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c\uc740 \uc0ac\ub78c\uc758 \uac1c\uc785 (Human in the loop) \uc744 \uad6c\ud604\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.</p> <p>\uc5ec\uae30\uc11c \uc7a0\uae50! LangGraph Studio \ub97c \uc0ac\uc6a9\ud558\uba74, \uc544\uc8fc \uc27d\uac8c \uc778\ud130\ub7fd\ud2b8\ub97c UX \uc640 \ud568\uaed8 \uad6c\ud604 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. 24.9.30 \uae30\uc900 MAC OS \ub9cc \ubca0\ud0c0\ub85c \uc9c0\uc6d0\ud569\ub2c8\ub2e4.</p> <p>\uadf8\ub798\ud504\ub97c \ucef4\ud30c\uc77c \ud560\ub54c, <code>interrupt_before</code>  \ub97c <code>tools</code> \ub178\ub4dc\uc5d0\ub2e4\uac00 \ub123\uaca0\uc2b5\ub2c8\ub2e4.</p> In\u00a0[\u00a0]: Copied! <pre>graph = graph_builder.compile(\n    checkpointer=memory,\n    # This is new!\n    interrupt_before=[\"tools\"],\n\n    # Note: can also interrupt __after__ tools, if desired.\n    # interrupt_after=[\"tools\"]\n)\n</pre> graph = graph_builder.compile(     checkpointer=memory,     # This is new!     interrupt_before=[\"tools\"],      # Note: can also interrupt __after__ tools, if desired.     # interrupt_after=[\"tools\"] ) In\u00a0[\u00a0]: Copied! <pre>user_input = \"\ub098\ub294 \uc9c0\uae08 \ub7ad\uadf8\ub798\ud504\ub97c \ubc30\uc6b0\uace0 \uc788\ub294\ub370, \ub300\uc2e0 \uc870\uc0ac \uc880 \ud574\uc904\ub798?\"\nconfig = {\"configurable\": {\"thread_id\": \"1\"}}\n# The config is the **second positional argument** to stream() or invoke()!\nevents = graph.stream(\n    {\"messages\": [(\"user\", user_input)]}, config, stream_mode=\"values\"\n)\nfor event in events:\n    if \"messages\" in event:\n        event[\"messages\"][-1].pretty_print()\n</pre> user_input = \"\ub098\ub294 \uc9c0\uae08 \ub7ad\uadf8\ub798\ud504\ub97c \ubc30\uc6b0\uace0 \uc788\ub294\ub370, \ub300\uc2e0 \uc870\uc0ac \uc880 \ud574\uc904\ub798?\" config = {\"configurable\": {\"thread_id\": \"1\"}} # The config is the **second positional argument** to stream() or invoke()! events = graph.stream(     {\"messages\": [(\"user\", user_input)]}, config, stream_mode=\"values\" ) for event in events:     if \"messages\" in event:         event[\"messages\"][-1].pretty_print() <pre>================================ Human Message =================================\n\n\ub098\ub294 \uc9c0\uae08 \ub7ad\uadf8\ub798\ud504\ub97c \ubc30\uc6b0\uace0 \uc788\ub294\ub370, \ub300\uc2e0 \uc870\uc0ac \uc880 \ud574\uc904\ub798?\n================================== Ai Message ==================================\nTool Calls:\n  tavily_search_results_json (call_56EmA9jt3tcBF09z4sVslldv)\n Call ID: call_56EmA9jt3tcBF09z4sVslldv\n  Args:\n    query: \ub7ad\uadf8\ub798\ud504(Leung graph) \uac1c\ub150 \ubc0f \ud65c\uc6a9\n</pre> <p><code>get_state()</code> \ub97c \ud574\uc11c \ub2e4\uc74c \uc2a4\ud0ed\uc744 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.</p> In\u00a0[\u00a0]: Copied! <pre>snapshot = graph.get_state(config)\nsnapshot.next\n</pre> snapshot = graph.get_state(config) snapshot.next Out[\u00a0]: <pre>('tools',)</pre> <p>Notice \uc544\uae4c \uc704\uc5d0\uc11c\ub294 next \uac00 \ube44\uc5b4\uc788\uc5c8\uc8e0. \uc774\ubc88\uc5d0\ub294 next \uc5d0  'tools' \uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc911\uac04 \ub2e8\uacc4\uc5d0\uc11c \uc798 \uba48\ucdc4\ub2e4\ub294 \ub73b\uc774\uc8e0.</p> In\u00a0[\u00a0]: Copied! <pre>existing_message = snapshot.values[\"messages\"][-1]\nexisting_message.tool_calls\n</pre> existing_message = snapshot.values[\"messages\"][-1] existing_message.tool_calls Out[\u00a0]: <pre>[{'name': 'tavily_search_results_json',\n  'args': {'query': '\ub7ad\uadf8\ub798\ud504(Leung graph) \uac1c\ub150 \ubc0f \ud65c\uc6a9'},\n  'id': 'call_56EmA9jt3tcBF09z4sVslldv',\n  'type': 'tool_call'}]</pre> <p>Tools \uc778 Tavily \ub85c \uac80\uc0c9\uc744 \ub0a0\ub9b4 \uc608\uc815\uc778\ub370, \ucffc\ub9ac\ub97c \ub0b4\ubcf4\ub0bc \uac80\uc0c9\uc5b4\uac00 \ub098\uc058\uc9c0 \uc54a\uc740 \uac83 \uac19\uc544\uc694, \ubcc4\ub2e4\ub978 \uc218\uc815\uc5c6\uc774 \uadf8\ub300\ub85c \uc9c4\ud589 \uc2dc\ucf1c \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.</p> In\u00a0[\u00a0]: Copied! <pre># `None` will append nothing new to the current state, letting it resume as if it had never been interrupted\nevents = graph.stream(None, config, stream_mode=\"values\")\nfor event in events:\n    if \"messages\" in event:\n        event[\"messages\"][-1].pretty_print()\n</pre> # `None` will append nothing new to the current state, letting it resume as if it had never been interrupted events = graph.stream(None, config, stream_mode=\"values\") for event in events:     if \"messages\" in event:         event[\"messages\"][-1].pretty_print() <pre>================================== Ai Message ==================================\nTool Calls:\n  tavily_search_results_json (call_56EmA9jt3tcBF09z4sVslldv)\n Call ID: call_56EmA9jt3tcBF09z4sVslldv\n  Args:\n    query: \ub7ad\uadf8\ub798\ud504(Leung graph) \uac1c\ub150 \ubc0f \ud65c\uc6a9\n================================= Tool Message =================================\nName: tavily_search_results_json\n\n[{\"url\": \"https://gunn.kim/langgraph-vs-langchain-evolution-of-llm-development-frameworks\", \"content\": \"\ub300\uaddc\ubaa8 \uc5b8\uc5b4 \ubaa8\ub378(LLM) \uae30\ubc18 \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \uac1c\ubc1c\uc774 \uae09\uc99d\ud558\uba74\uc11c \ub7ad\uccb4\uc778(LangChain)\uacfc \ub7ad\uadf8\ub798\ud504(LangGraph)\uac00 \uc8fc\ubaa9\ubc1b\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \uae00\uc5d0\uc11c\ub294 \ub450 \ud504\ub808\uc784\uc6cc\ud06c\uc758 \ud2b9\uc9d5, \ucc28\uc774\uc810, \uadf8\ub9ac\uace0 \uc2e4\uc81c \uc801\uc6a9 \uc0ac\ub840\ub97c \uc0b4\ud3b4\ubd05\ub2c8\ub2e4. AutoGPT\uc640\uc758 \uc720\uc0ac\uc131\uc744 \ud1b5\ud574 \uac01 \ud504\ub808\uc784\uc6cc\ud06c\ub97c \uc774\ud574\ud558\uace0, \ub098\uc2a4\ub2e5 \uc9c0\uc218 \ubd84\uc11d \ubc0f \ud3ec\ud2b8\ud3f4\ub9ac\uc624 \ucd5c\uc801\ud654 ...\"}, {\"url\": \"https://livewiki.com/ko/content/learn-langgraph-easy-way\", \"content\": \"LangGraph \uc571\uc744 \uc0ac\uc6a9\ud558\uba74 \uadf8\ub798\ud504 \uad6c\uc870\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc0ac\uc6a9\uc790 \ucffc\ub9ac\ub97c \ucc98\ub9ac\ud558\uace0 \uc751\ub2f5\ud558\ub294 \uc5d0\uc774\uc804\ud2b8 \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \ub610\ub294 LLM \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\"}]\n================================== Ai Message ==================================\n\n\ub7ad\uadf8\ub798\ud504(Leung graph)\uc5d0 \ub300\ud55c \uc815\ubcf4\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4:\n\n1. **\ub7ad\uadf8\ub798\ud504\uc640 \ub7ad\uccb4\uc778**:\n   - \ucd5c\uadfc \ub300\uaddc\ubaa8 \uc5b8\uc5b4 \ubaa8\ub378(LLM) \uae30\ubc18 \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \uac1c\ubc1c\uc774 \ud65c\ubc1c\ud574\uc9c0\uba74\uc11c \ub7ad\uccb4\uc778(LangChain)\uacfc \ub7ad\uadf8\ub798\ud504(LangGraph)\uac00 \uc8fc\ubaa9\ubc1b\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ub450 \ud504\ub808\uc784\uc6cc\ud06c\ub294 \uac01\uac01\uc758 \ud2b9\uc9d5\uacfc \ucc28\uc774\uc810\uc774 \uc788\uc73c\uba70, \uc2e4\uc81c \uc801\uc6a9 \uc0ac\ub840\ub97c \ud1b5\ud574 \uc774\ud574\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. [\ub354 \uc54c\uc544\ubcf4\uae30](https://gunn.kim/langgraph-vs-langchain-evolution-of-llm-development-frameworks)\n\n2. **LangGraph \uc571**:\n   - LangGraph \uc571\uc744 \uc0ac\uc6a9\ud558\uba74 \uadf8\ub798\ud504 \uad6c\uc870\ub97c \ud65c\uc6a9\ud558\uc5ec \uc0ac\uc6a9\uc790 \ucffc\ub9ac\ub97c \ucc98\ub9ac\ud558\uace0 \uc751\ub2f5\ud558\ub294 \uc5d0\uc774\uc804\ud2b8 \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \ub610\ub294 LLM \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub294 \ub370\uc774\ud130 \uad6c\uc870\ub97c \ud6a8\uc728\uc801\uc73c\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \ubc29\ubc95\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4. [\uc790\uc138\ud788 \ubcf4\uae30](https://livewiki.com/ko/content/learn-langgraph-easy-way)\n\n\ub354 \uad81\uae08\ud55c \uc810\uc774 \uc788\uc73c\uba74 \ub9d0\uc500\ud574 \uc8fc\uc138\uc694!\n</pre> <p>\ucca8\uc5b8</p> <p>\uac80\uc0c9\uacb0\uacfc\uac00 \ub9e4\uc6b0 \ub9c8\uc74c\uc5d0 \uc548\ub4e4\uae30\ub294 \ud569\ub2c8\ub2e4... \ud3ec\uc2a4\ud2b8\uac00 AI generated content \uc778 \uac83 \uac19\uad70\uc694. \ud53c\uaddc\uc5b4\ub3c4 \uae68\uc838\uc788\uace0, \uc790\uc138\ud788 \uc77d\uc5b4\ubcf4\uba74 \ud2c0\ub9b0 \ub0b4\uc6a9\ub3c4 \ub9ce\uc2b5\ub2c8\ub2e4. \uc544\ub9c8 \ub300\ubd80\ubd84\uc740 \ub208\uce58\ucc44\uc9c0 \ubabb\ud560\ud14c\uc9c0\ub9cc\uc694. Human-in-the-loop \uc774 \uc774\ub7f0 \uac80\uc0c9 \uacb0\uacfc\uc5d0\uc11c \ub9ac\uc81d\ud558\uace0 \uc2f6\uc740 \uac83\ub4e4\uc744 \uac70\ub974\uae30 \uc704\ud55c \ubc29\ubc95\uc73c\ub85c\ub3c4 \uc798 \uc4f0\uc77c \uac83 \uac19\uc740\ub370, After Tool \uc5d0 \uc778\ud130\ub7fd\ud2b8\ub97c \uac78\uc5b4\uc11c \ud55c\ubc88 \uac70\uc808\ud558\ub3c4\ub85d \ud574\ubcfc\uae4c\uc694?</p> In\u00a0[\u00a0]: Copied! <pre>graph_builder = StateGraph(State)\n\ngraph_builder.add_node(\"chatbot\", chatbot)\n\ntool_node = ToolNode(tools=[tool])\ngraph_builder.add_node(\"tools\", tool_node)\n\ngraph_builder.add_conditional_edges(\n    \"chatbot\",\n    tools_condition,\n)\ngraph_builder.add_edge(\"tools\", \"chatbot\")\ngraph_builder.add_edge(START, \"chatbot\")\nmemory = MemorySaver()\ngraph = graph_builder.compile(\n    checkpointer=memory,\n    # This is new!\n    interrupt_before=[\"tools\"],\n    # Note: can also interrupt **after** actions, if desired.\n    # interrupt_after=[\"tools\"]\n)\n\nuser_input = \"\ub098\ub294 \uc9c0\uae08 \ub7ad\uadf8\ub798\ud504\ub97c \ubc30\uc6b0\uace0 \uc788\ub294\ub370, \ub300\uc2e0 \uc870\uc0ac \uc880 \ud574\uc904\ub798?\"\nconfig = {\"configurable\": {\"thread_id\": \"3\"}}\n# The config is the **second positional argument** to stream() or invoke()!\nevents = graph.stream({\"messages\": [(\"user\", user_input)]}, config)\nfor event in events:\n    if \"messages\" in event:\n        event[\"messages\"][-1].pretty_print()\n</pre> graph_builder = StateGraph(State)  graph_builder.add_node(\"chatbot\", chatbot)  tool_node = ToolNode(tools=[tool]) graph_builder.add_node(\"tools\", tool_node)  graph_builder.add_conditional_edges(     \"chatbot\",     tools_condition, ) graph_builder.add_edge(\"tools\", \"chatbot\") graph_builder.add_edge(START, \"chatbot\") memory = MemorySaver() graph = graph_builder.compile(     checkpointer=memory,     # This is new!     interrupt_before=[\"tools\"],     # Note: can also interrupt **after** actions, if desired.     # interrupt_after=[\"tools\"] )  user_input = \"\ub098\ub294 \uc9c0\uae08 \ub7ad\uadf8\ub798\ud504\ub97c \ubc30\uc6b0\uace0 \uc788\ub294\ub370, \ub300\uc2e0 \uc870\uc0ac \uc880 \ud574\uc904\ub798?\" config = {\"configurable\": {\"thread_id\": \"3\"}} # The config is the **second positional argument** to stream() or invoke()! events = graph.stream({\"messages\": [(\"user\", user_input)]}, config) for event in events:     if \"messages\" in event:         event[\"messages\"][-1].pretty_print() In\u00a0[\u00a0]: Copied! <pre>snapshot = graph.get_state(config)\nexisting_message = snapshot.values[\"messages\"][-1]\nexisting_message.pretty_print()\n</pre> snapshot = graph.get_state(config) existing_message = snapshot.values[\"messages\"][-1] existing_message.pretty_print() <pre>================================== Ai Message ==================================\nTool Calls:\n  tavily_search_results_json (call_N9E5wxGaTBpZudPU5IkiRBac)\n Call ID: call_N9E5wxGaTBpZudPU5IkiRBac\n  Args:\n    query: \ub7ad\uadf8\ub798\ud504 \ub7ad\ud0b9 \uadf8\ub798\ud504 \uacf5\ubd80\n</pre> In\u00a0[\u00a0]: Copied! <pre>snapshot\n</pre> snapshot Out[\u00a0]: <pre>StateSnapshot(values={'messages': [HumanMessage(content='\ub098\ub294 \uc9c0\uae08 \ub7ad\uadf8\ub798\ud504\ub97c \ubc30\uc6b0\uace0 \uc788\ub294\ub370, \ub300\uc2e0 \uc870\uc0ac \uc880 \ud574\uc904\ub798?', additional_kwargs={}, response_metadata={}, id='e7ce0efa-ef12-41f0-b5f5-eb662a0e8902'), AIMessage(content='', additional_kwargs={'tool_calls': [{'id': 'call_N9E5wxGaTBpZudPU5IkiRBac', 'function': {'arguments': '{\"query\":\"\ub7ad\uadf8\ub798\ud504 \ub7ad\ud0b9 \uadf8\ub798\ud504 \uacf5\ubd80\"}', 'name': 'tavily_search_results_json'}, 'type': 'function'}], 'refusal': None}, response_metadata={'token_usage': {'completion_tokens': 27, 'prompt_tokens': 97, 'total_tokens': 124, 'completion_tokens_details': {'reasoning_tokens': 0}}, 'model_name': 'gpt-4o-mini-2024-07-18', 'system_fingerprint': 'fp_54e2f484be', 'finish_reason': 'tool_calls', 'logprobs': None}, id='run-76b993a2-cfcd-42a6-870a-70bb44080fd4-0', tool_calls=[{'name': 'tavily_search_results_json', 'args': {'query': '\ub7ad\uadf8\ub798\ud504 \ub7ad\ud0b9 \uadf8\ub798\ud504 \uacf5\ubd80'}, 'id': 'call_N9E5wxGaTBpZudPU5IkiRBac', 'type': 'tool_call'}], usage_metadata={'input_tokens': 97, 'output_tokens': 27, 'total_tokens': 124})]}, next=('tools',), config={'configurable': {'thread_id': '3', 'checkpoint_ns': '', 'checkpoint_id': '1ef757b6-a154-658c-8001-2fe079d4b550'}}, metadata={'source': 'loop', 'writes': {'chatbot': {'messages': [AIMessage(content='', additional_kwargs={'tool_calls': [{'id': 'call_N9E5wxGaTBpZudPU5IkiRBac', 'function': {'arguments': '{\"query\":\"\ub7ad\uadf8\ub798\ud504 \ub7ad\ud0b9 \uadf8\ub798\ud504 \uacf5\ubd80\"}', 'name': 'tavily_search_results_json'}, 'type': 'function'}], 'refusal': None}, response_metadata={'token_usage': {'completion_tokens': 27, 'prompt_tokens': 97, 'total_tokens': 124, 'completion_tokens_details': {'reasoning_tokens': 0}}, 'model_name': 'gpt-4o-mini-2024-07-18', 'system_fingerprint': 'fp_54e2f484be', 'finish_reason': 'tool_calls', 'logprobs': None}, id='run-76b993a2-cfcd-42a6-870a-70bb44080fd4-0', tool_calls=[{'name': 'tavily_search_results_json', 'args': {'query': '\ub7ad\uadf8\ub798\ud504 \ub7ad\ud0b9 \uadf8\ub798\ud504 \uacf5\ubd80'}, 'id': 'call_N9E5wxGaTBpZudPU5IkiRBac', 'type': 'tool_call'}], usage_metadata={'input_tokens': 97, 'output_tokens': 27, 'total_tokens': 124})]}}, 'step': 1, 'parents': {}}, created_at='2024-09-18T05:03:59.298067+00:00', parent_config={'configurable': {'thread_id': '3', 'checkpoint_ns': '', 'checkpoint_id': '1ef757b6-9943-61cf-8000-3d5416a18823'}}, tasks=(PregelTask(id='b54345af-217f-26eb-d082-49863f437ded', name='tools', path=('__pregel_pull', 'tools'), error=None, interrupts=(), state=None),))</pre> <p>\uc704\uc640 \uac19\uc774 tavily \uac00 query \ub97c \ub0a0\ub9ac\ub824\uace0 \ud569\ub2c8\ub2e4, \uadf8\ub7f0\ub370 query \uac00 \ub9d8\uc5d0 \uc548\ub4dc\ub124\uc694...?</p> <p>\"\uac80\uc0c9\uc744 \uc0dd\ub7b5\ud558\uace0 \ubc14\ub85c \ub2f5\ubcc0\uc744 \ud574\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.\"</p> In\u00a0[\u00a0]: Copied! <pre>from langchain_core.messages import AIMessage, ToolMessage\n\nanswer = (\n    \"\ub7ad\uadf8\ub798\ud504\ub294 stateful, multi-actor LLM applications \ub97c \ub9cc\ub4dc\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac \ub780\ub2e4\"\n)\nnew_messages = [\n    # The LLM API expects some ToolMessage to match its tool call. We'll satisfy that here.\n    ToolMessage(content=answer, tool_call_id=existing_message.tool_calls[0][\"id\"]),\n    # And then directly \"put words in the LLM's mouth\" by populating its response.\n    AIMessage(content=answer),\n]\n\nnew_messages[-1].pretty_print()\ngraph.update_state(\n    # Which state to update\n    config,\n    # The updated values to provide. The messages in our `State` are \"append-only\", meaning this will be appended\n    # to the existing state. We will review how to update existing messages in the next section!\n    {\"messages\": new_messages},\n)\n\nprint(\"\\n\\nLast 2 messages;\")\nprint(graph.get_state(config).values[\"messages\"][-2:])\n</pre> from langchain_core.messages import AIMessage, ToolMessage  answer = (     \"\ub7ad\uadf8\ub798\ud504\ub294 stateful, multi-actor LLM applications \ub97c \ub9cc\ub4dc\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac \ub780\ub2e4\" ) new_messages = [     # The LLM API expects some ToolMessage to match its tool call. We'll satisfy that here.     ToolMessage(content=answer, tool_call_id=existing_message.tool_calls[0][\"id\"]),     # And then directly \"put words in the LLM's mouth\" by populating its response.     AIMessage(content=answer), ]  new_messages[-1].pretty_print() graph.update_state(     # Which state to update     config,     # The updated values to provide. The messages in our `State` are \"append-only\", meaning this will be appended     # to the existing state. We will review how to update existing messages in the next section!     {\"messages\": new_messages}, )  print(\"\\n\\nLast 2 messages;\") print(graph.get_state(config).values[\"messages\"][-2:]) <pre>================================== Ai Message ==================================\n\n\ub7ad\uadf8\ub798\ud504\ub294 stateful, multi-actor LLM applications \ub97c \ub9cc\ub4dc\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac \ub780\ub2e4\n\n\nLast 2 messages;\n[ToolMessage(content='\ub7ad\uadf8\ub798\ud504\ub294 stateful, multi-actor LLM applications \ub97c \ub9cc\ub4dc\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac \ub780\ub2e4', id='69859f3c-907d-4679-8a07-aae03651d304', tool_call_id='call_N9E5wxGaTBpZudPU5IkiRBac'), AIMessage(content='\ub7ad\uadf8\ub798\ud504\ub294 stateful, multi-actor LLM applications \ub97c \ub9cc\ub4dc\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac \ub780\ub2e4', additional_kwargs={}, response_metadata={}, id='262a50f2-1c44-41f6-a34b-9d20353c23a4')]\n</pre> In\u00a0[\u00a0]: Copied! <pre>graph.get_state(config).next\n</pre> graph.get_state(config).next Out[\u00a0]: <pre>()</pre> <p>\uadf8\ub798\ud504\ub294 \ub05d\ub0ac\uc2b5\ub2c8\ub2e4. next \uac00 \ube44\uc5b4\uc788\uc8e0. \uac15\uc81c\ub85c \uc791\uc131\ud55c \ub2f5\ubcc0\uc744 \ub0b4\ubc49\uace0 \ub9c8\ubb34\ub9ac\uac00 \ub418\uc5c8\uace0\uc694. State \uc5c5\ub370\uc774\ud2b8\uac00 graph step (\uc5ec\uae30\uc11c\ub294 tool\ub85c \uc9c0\uc815\ub41c tavily \uac80\uc0c9) \uc744 \uc2dc\ubbac\ub808\uc774\uc158 \ud55c \uac83\uc774\uc8e0. LangSmith \uc5d0 \ucc0d\ud78c trace \ub3c4 \ud55c\ubc88 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. LangSmith trace \uc5d0\uc11c <code>update_state()</code> \uc758 \ub3d9\uc791 \ub85c\uadf8\ub97c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p> <p>Notice</p> <p><code>State</code> \ud0c0\uc785\uc744 \ub2e4\uc2dc \ud55c\ubc88 \ubcf4\uba74, message \uac00 append \ub9cc \ub418\ub294 \ud615\ud0dc\uc785\ub2c8\ub2e4. overwrite, \ub36e\uc5b4\uc4f0\uae30\uac00 \ub418\ub294 \ud615\ud0dc\uac00 \uc544\ub2c8\uc8e0.</p> <pre>class State(TypedDict):\n    messages: Annotated[list, add_messages]\n</pre> <p><code>update_state</code> \ub3c4 \ub9c8\ucc2c\uac00\uc9c0 \uc785\ub2c8\ub2e4, \uadf8\ub798\uc11c tool \ub178\ub4dc\uc5d0 \uac00\uc57c\ud560 \ucc28\ub840\ub97c \uc0dd\ub7b5\ud558\uace0 \uc5c5\ub370\uc774\ud2b8\ub85c \uba54\uc138\uc9c0\ub97c \uc774\uc5b4 \ubd99\uc778 \uac83\uc774\uc8e0.</p> <p>\uae30\ubcf8\uc801\uc73c\ub85c\ub294 \uc5c5\ub370\uc774\ud2b8 \ud558\ub294 \ud589\uc704\ub294 \ub9c8\uc9c0\ub9c9 \ub178\ub4dc\uc5d0\uc11c \ub098\uc544\uac00\ub294 \uac83\uc73c\ub85c \ub3d9\uc791\ud558\uc9c0\ub9cc, \uc5b4\ub290 \ub178\ub4dc\uc758 \uacb0\uacfc\uc778\uc9c0 \ub9c8\uc74c\ub300\ub85c \uc9c0\uc815\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ubc88\uc5d0\ub294 \"chatbot\" \ub178\ub4dc\uc5d0\uc11c \uc2e4\ud589\ud55c \uac83\uc73c\ub85c \ucc98\ub9ac\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.</p> In\u00a0[\u00a0]: Copied! <pre>graph.update_state(\n    config,\n    {\"messages\": [AIMessage(content=\"I'm an AI expert!\")]},\n    # Which node for this function to act as. It will automatically continue\n    # processing as if this node just ran.\n    as_node=\"chatbot\",\n)\n</pre> graph.update_state(     config,     {\"messages\": [AIMessage(content=\"I'm an AI expert!\")]},     # Which node for this function to act as. It will automatically continue     # processing as if this node just ran.     as_node=\"chatbot\", ) Out[\u00a0]: <pre>{'configurable': {'thread_id': '3',\n  'checkpoint_ns': '',\n  'checkpoint_id': '1ef7580d-2b61-6742-8003-204dc6472893'}}</pre> <p>LangSmith trace \uc5d0\uc11c \uacb0\uacfc\ub97c \ud655\uc778 \uac00\ub2a5\ud569\ub2c8\ub2e4.</p> <p>Notice \ud2b8\ub808\uc774\uc2a4\ub97c \ubcf4\uba74, \uc774\ubbf8 \ub2e4 \ub05d\ub09c \uadf8\ub798\ud504\uc5d0\uc11c \ucd94\uac00\ub85c \ub354 \uc9c4\ud589\ud588\uace0, \ub9c8\uc9c0\ub9c9\uc5d0 <code>tools_condition</code> \uc774 \uc218\ud589\ub418\uace0 \ub05d\ub0ac\uc2b5\ub2c8\ub2e4.</p> In\u00a0[\u00a0]: Copied! <pre>from IPython.display import Image, display\n\ntry:\n    display(Image(graph.get_graph().draw_mermaid_png()))\nexcept Exception:\n    # This requires some extra dependencies and is optional\n    pass\n</pre> from IPython.display import Image, display  try:     display(Image(graph.get_graph().draw_mermaid_png())) except Exception:     # This requires some extra dependencies and is optional     pass In\u00a0[\u00a0]: Copied! <pre>snapshot = graph.get_state(config)\nprint(snapshot.values[\"messages\"][-3:])\nprint(snapshot.next)\n</pre> snapshot = graph.get_state(config) print(snapshot.values[\"messages\"][-3:]) print(snapshot.next) <pre>[ToolMessage(content='\ub7ad\uadf8\ub798\ud504\ub294 stateful, multi-actor LLM applications \ub97c \ub9cc\ub4dc\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac \ub780\ub2e4', id='69859f3c-907d-4679-8a07-aae03651d304', tool_call_id='call_N9E5wxGaTBpZudPU5IkiRBac'), AIMessage(content='\ub7ad\uadf8\ub798\ud504\ub294 stateful, multi-actor LLM applications \ub97c \ub9cc\ub4dc\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac \ub780\ub2e4', additional_kwargs={}, response_metadata={}, id='262a50f2-1c44-41f6-a34b-9d20353c23a4'), AIMessage(content=\"I'm an AI expert!\", additional_kwargs={}, response_metadata={}, id='1666e433-9d66-4fd2-a4ff-464a33564ca7')]\n()\n</pre> In\u00a0[\u00a0]: Copied! <pre>user_input = \"\ub098\ub294 \uc9c0\uae08 \ub7ad\uadf8\ub798\ud504\ub97c \ubc30\uc6b0\uace0 \uc788\ub294\ub370, \ub300\uc2e0 \uc870\uc0ac \uc880 \ud574\uc904\ub798?\"\nconfig = {\"configurable\": {\"thread_id\": \"4\"}}  # we'll use thread_id = 4 here\nevents = graph.stream(\n    {\"messages\": [(\"user\", user_input)]}, config, stream_mode=\"values\"\n)\nfor event in events:\n    if \"messages\" in event:\n        event[\"messages\"][-1].pretty_print()\n</pre> user_input = \"\ub098\ub294 \uc9c0\uae08 \ub7ad\uadf8\ub798\ud504\ub97c \ubc30\uc6b0\uace0 \uc788\ub294\ub370, \ub300\uc2e0 \uc870\uc0ac \uc880 \ud574\uc904\ub798?\" config = {\"configurable\": {\"thread_id\": \"4\"}}  # we'll use thread_id = 4 here events = graph.stream(     {\"messages\": [(\"user\", user_input)]}, config, stream_mode=\"values\" ) for event in events:     if \"messages\" in event:         event[\"messages\"][-1].pretty_print() <pre>================================ Human Message =================================\n\n\ub098\ub294 \uc9c0\uae08 \ub7ad\uadf8\ub798\ud504\ub97c \ubc30\uc6b0\uace0 \uc788\ub294\ub370, \ub300\uc2e0 \uc870\uc0ac \uc880 \ud574\uc904\ub798?\n================================== Ai Message ==================================\nTool Calls:\n  tavily_search_results_json (call_85Z84vjd60rJ18pWRb00GuWI)\n Call ID: call_85Z84vjd60rJ18pWRb00GuWI\n  Args:\n    query: \ub7ad\uadf8\ub798\ud504 \ub7ad\ud06c\uadf8\ub798\ud504 \ubc30\uc6b0\uae30\n</pre> <p>Next, \uc774\ubc88\uc5d0\ub294 \ucffc\ub9ac\uac00 \uc774\ub807\uac8c \ub098\uc654\uc5b4\uc694.</p> <ul> <li>\"\ub7ad\uadf8\ub798\ud504 \ub7ad\ud06c\uadf8\ub798\ud504 \ubc30\uc6b0\uae30\"</li> </ul> <p>\ucffc\ub9ac\uac00 \ub9c8\uc74c\uc5d0 \uc548\ub4e7\ub2c8\ub2e4. \ubc14\uafd4\uc11c \uc774\uc5b4\uac00\uaca0\uc2b5\ub2c8\ub2e4.</p> In\u00a0[\u00a0]: Copied! <pre>from langchain_core.messages import AIMessage\n\nsnapshot = graph.get_state(config)\nexisting_message = snapshot.values[\"messages\"][-1]\nprint(\"Original\")\nprint(\"Message ID\", existing_message.id)\nprint(existing_message.tool_calls[0])\nnew_tool_call = existing_message.tool_calls[0].copy()\nnew_tool_call[\"args\"][\"query\"] = \"\ub7ad\uadf8\ub798\ud504 Langgraph \uc0ac\uc6a9\ubc95\"\nnew_message = AIMessage(\n    content=existing_message.content,\n    tool_calls=[new_tool_call],\n    # Important! The ID is how LangGraph knows to REPLACE the message in the state rather than APPEND this messages\n    id=existing_message.id,\n)\n\nprint(\"Updated\")\nprint(new_message.tool_calls[0])\nprint(\"Message ID\", new_message.id)\ngraph.update_state(config, {\"messages\": [new_message]})\n\nprint(\"\\n\\nTool calls\")\ngraph.get_state(config).values[\"messages\"][-1].tool_calls\n</pre> from langchain_core.messages import AIMessage  snapshot = graph.get_state(config) existing_message = snapshot.values[\"messages\"][-1] print(\"Original\") print(\"Message ID\", existing_message.id) print(existing_message.tool_calls[0]) new_tool_call = existing_message.tool_calls[0].copy() new_tool_call[\"args\"][\"query\"] = \"\ub7ad\uadf8\ub798\ud504 Langgraph \uc0ac\uc6a9\ubc95\" new_message = AIMessage(     content=existing_message.content,     tool_calls=[new_tool_call],     # Important! The ID is how LangGraph knows to REPLACE the message in the state rather than APPEND this messages     id=existing_message.id, )  print(\"Updated\") print(new_message.tool_calls[0]) print(\"Message ID\", new_message.id) graph.update_state(config, {\"messages\": [new_message]})  print(\"\\n\\nTool calls\") graph.get_state(config).values[\"messages\"][-1].tool_calls <pre>Original\nMessage ID run-29a7fc2d-236d-44a3-80ec-bbda0576d745-0\n{'name': 'tavily_search_results_json', 'args': {'query': '\ub7ad\uadf8\ub798\ud504 Langgraph \uc0ac\uc6a9 \ubc95'}, 'id': 'call_85Z84vjd60rJ18pWRb00GuWI', 'type': 'tool_call'}\nUpdated\n{'name': 'tavily_search_results_json', 'args': {'query': '\ub7ad\uadf8\ub798\ud504 Langgraph \uc0ac\uc6a9\ubc95'}, 'id': 'call_85Z84vjd60rJ18pWRb00GuWI', 'type': 'tool_call'}\nMessage ID run-29a7fc2d-236d-44a3-80ec-bbda0576d745-0\n\n\nTool calls\n</pre> Out[\u00a0]: <pre>[{'name': 'tavily_search_results_json',\n  'args': {'query': '\ub7ad\uadf8\ub798\ud504 Langgraph \uc0ac\uc6a9\ubc95'},\n  'id': 'call_85Z84vjd60rJ18pWRb00GuWI',\n  'type': 'tool_call'}]</pre> <p>Notice</p> <p>'\ub7ad\uadf8\ub798\ud504 Langgraph \uc0ac\uc6a9\ubc95' \uc774\ub77c\uace0 \ucffc\ub9ac \ub0b4\uc6a9\uc744 \ubc14\uafd4 \ubd24\uc2b5\ub2c8\ub2e4.</p> <p>LangSmith trace \uc744 \uccb4\ud06c\ud574\ubcf4\uba74, \ub2e4\uc74c tool \ud638\ucd9c\uc5d0 \ub0a0\ub824\uc57c\ud560 \ucffc\ub9ac\uac00 \ubc14\ub010 \uac83\uc744 \ubcfc \uc218 \uc788\uc5b4\uc694.</p> <p>graph.stream \uc744 \uc774\uc5b4\uac00\uaca0\uc2b5\ub2c8\ub2e4. \uba54\uc138\uc9c0\ub294 \uc788\ub358 \uac83\uc744 \uad50\uccb4\ud588\uc73c\ub2c8 \ub2e4\uc2dc \ucd94\uac00\ub85c \ub123\uc744 \uac83\uc740 \uc5c6\uc2b5\ub2c8\ub2e4. None \uc744 \ucd94\uace0 \uc774\uc5b4\uac00\uaca0\uc2b5\ub2c8\ub2e4.</p> In\u00a0[\u00a0]: Copied! <pre>events = graph.stream(None, config, stream_mode=\"values\")\nfor event in events:\n    if \"messages\" in event:\n        event[\"messages\"][-1].pretty_print()\n</pre> events = graph.stream(None, config, stream_mode=\"values\") for event in events:     if \"messages\" in event:         event[\"messages\"][-1].pretty_print() <pre>================================== Ai Message ==================================\nTool Calls:\n  tavily_search_results_json (call_85Z84vjd60rJ18pWRb00GuWI)\n Call ID: call_85Z84vjd60rJ18pWRb00GuWI\n  Args:\n    query: \ub7ad\uadf8\ub798\ud504 Langgraph \uc0ac\uc6a9\ubc95\n================================= Tool Message =================================\nName: tavily_search_results_json\n\n[{\"url\": \"https://www.datacamp.com/tutorial/langgraph-tutorial\", \"content\": \"LangGraph is a library within the LangChain ecosystem designed to tackle these challenges head-on. LangGraph provides a framework for defining, coordinating, and executing multiple LLM agents (or chains) in a structured manner. It simplifies the development process by enabling the creation of cyclical graphs, which are essential for developing ...\"}, {\"url\": \"https://langchain-ai.github.io/langgraph/how-tos/\", \"content\": \"One of LangGraph's main benefits is that it makes human-in-the-loop workflows easy. These guides cover common examples of that. How to add breakpoints. How to add dynamic breakpoints. How to edit graph state. How to wait for user input. How to view and update past graph state. Review tool calls.\"}]\n================================== Ai Message ==================================\n\n\ub7ad\uadf8\ub798\ud504(Langgraph)\ub294 LangChain \uc0dd\ud0dc\uacc4 \ub0b4\uc758 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub85c, \uc5ec\ub7ec LLM \uc5d0\uc774\uc804\ud2b8(\ub610\ub294 \uccb4\uc778)\ub97c \uc815\uc758\ud558\uace0 \uc870\uc815\ud558\uba70 \uc2e4\ud589\ud558\ub294 \ub370 \ub3c4\uc6c0\uc744 \uc90d\ub2c8\ub2e4. \ub7ad\uadf8\ub798\ud504\ub97c \ud1b5\ud574 \uac1c\ubc1c\uc790\ub294 \uc21c\ud658 \uadf8\ub798\ud504\ub97c \uc27d\uac8c \uc0dd\uc131\ud560 \uc218 \uc788\uc5b4 \ubcf5\uc7a1\ud55c \uc791\uc5c5\uc744 \ubcf4\ub2e4 \uad6c\uc870\uc801\uc73c\ub85c \ucc98\ub9ac\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\uc5ec\uae30 \uba87 \uac00\uc9c0 \uc720\uc6a9\ud55c \uc790\ub8cc\ub97c \uc18c\uac1c\ud560\uac8c\uc694:\n\n1. [DataCamp\uc758 LangGraph \ud29c\ud1a0\ub9ac\uc5bc](https://www.datacamp.com/tutorial/langgraph-tutorial): LangGraph\uc758 \uae30\ubcf8 \uac1c\ub150\uacfc \uc0ac\uc6a9\ubc95\uc5d0 \ub300\ud574 \uc0c1\uc138\ud788 \uc124\uba85\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4.\n\n2. [LangChain \uacf5\uc2dd \ubb38\uc11c\uc758 How-To \uac00\uc774\ub4dc](https://langchain-ai.github.io/langgraph/how-tos/): \uc778\uac04\uc758 \uac1c\uc785\uc774 \ud544\uc694\ud55c \uc791\uc5c5 \ud750\ub984\uc744 \uc27d\uac8c \ub9cc\ub4e4 \uc218 \uc788\ub3c4\ub85d \ub2e4\uc591\ud55c \uc608\uc81c\ub97c \ub2e4\ub8e8\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc5ec\uae30\uc5d0\ub294 \uc911\ub2e8\uc810 \ucd94\uac00, \ub3d9\uc801 \uc911\ub2e8\uc810 \ucd94\uac00, \uadf8\ub798\ud504 \uc0c1\ud0dc \ud3b8\uc9d1 \ub4f1\uc758 \ubc29\ubc95\uc774 \ud3ec\ud568\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.\n\n\uc774 \uc790\ub8cc\ub4e4\uc744 \ud1b5\ud574 \ub7ad\uadf8\ub798\ud504\uc5d0 \ub300\ud55c \uc774\ud574\ub97c \ub192\uc77c \uc218 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4! \ucd94\uac00\uc801\uc778 \uc9c8\ubb38\uc774 \uc788\uc73c\uba74 \uc5b8\uc81c\ub4e0\uc9c0 \ubb3c\uc5b4\ubcf4\uc138\uc694.\n</pre> <p>\ucd5c\uc885 trace \ub97c \ubcf4\uba74, \uccab \uc9c8\ubb38\uc5d0 \uc774\uc5b4\uc11c \ucffc\ub9ac\uac00 \ubc14\ub00c\uace0 tool \uc774 \ud638\ucd9c\ub418\uace0, \uadf8 \uac80\uc0c9\uacb0\uacfc\ub85c \ub2f5\ubcc0\ud55c \uac83\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p> <p>\uc774 \uadf8\ub798\ud504\uc5d0 \uc774\uc5b4\uc11c \uc9c8\ubb38\uc744 \ud574\ubcf4\uba74, memory \uc5d0 \ub4e4\uc5b4\uac04 \ub0b4\uc6a9\uc744 \ucc38\uc870\ud574\uc11c \ub2f5\ubcc0\uc744 \ud558\ub294 \uac83\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p> In\u00a0[\u00a0]: Copied! <pre>events = graph.stream(\n    {\n        \"messages\": (\n            \"user\",\n            \"\uc790 \ub108\ub294 \ubb58 \ubc30\uc6e0\uc9c0?\",\n        )\n    },\n    config,\n    stream_mode=\"values\",\n)\nfor event in events:\n    if \"messages\" in event:\n        event[\"messages\"][-1].pretty_print()\n</pre> events = graph.stream(     {         \"messages\": (             \"user\",             \"\uc790 \ub108\ub294 \ubb58 \ubc30\uc6e0\uc9c0?\",         )     },     config,     stream_mode=\"values\", ) for event in events:     if \"messages\" in event:         event[\"messages\"][-1].pretty_print() <pre>================================ Human Message =================================\n\n\uc790 \ub108\ub294 \ubb58 \ubc30\uc6e0\uc9c0?\n================================== Ai Message ==================================\n\n\ub7ad\uadf8\ub798\ud504(Langgraph)\uc5d0 \ub300\ud574 \ubc30\uc6b4 \ub0b4\uc6a9\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4:\n\n1. **\uc815\uc758 \ubc0f \ubaa9\uc801**: \ub7ad\uadf8\ub798\ud504\ub294 LangChain \uc0dd\ud0dc\uacc4\uc758 \uc77c\ubd80\ub85c, \uc5ec\ub7ec LLM(\ub300\ud615 \uc5b8\uc5b4 \ubaa8\ub378) \uc5d0\uc774\uc804\ud2b8\ub098 \uccb4\uc778\uc744 \uc815\uc758\ud558\uace0 \uc870\uc815\ud558\ub294 \ub370 \ub3c4\uc6c0\uc744 \uc8fc\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc785\ub2c8\ub2e4. \uc774\ub97c \ud1b5\ud574 \ubcf5\uc7a1\ud55c \uc791\uc5c5\uc744 \uad6c\uc870\uc801\uc73c\ub85c \ucc98\ub9ac\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n2. **\uae30\ub2a5**: \ub7ad\uadf8\ub798\ud504\ub294 \uc21c\ud658 \uadf8\ub798\ud504\ub97c \uc0dd\uc131\ud560 \uc218 \uc788\ub294 \uae30\ub2a5\uc744 \uc81c\uacf5\ud558\uc5ec \uac1c\ubc1c\uc790\uac00 \ub2e4\uc591\ud55c \uc791\uc5c5 \ud750\ub984\uc744 \uc27d\uac8c \uad6c\uc131\ud560 \uc218 \uc788\ub3c4\ub85d \ud569\ub2c8\ub2e4. \ub610\ud55c, \uc778\uac04\uc758 \uac1c\uc785\uc774 \ud544\uc694\ud55c \uc791\uc5c5 \ud750\ub984\uc744 \uc27d\uac8c \ub9cc\ub4e4 \uc218 \uc788\ub294 \ub2e4\uc591\ud55c \ub3c4\uad6c\uc640 \ubc29\ubc95\uc744 \uc9c0\uc6d0\ud569\ub2c8\ub2e4.\n\n3. **\uc720\uc6a9\ud55c \uc790\ub8cc**: \ub7ad\uadf8\ub798\ud504\uc5d0 \ub300\ud55c \ud29c\ud1a0\ub9ac\uc5bc\uacfc How-To \uac00\uc774\ub4dc\uac00 \uc81c\uacf5\ub418\uc5b4 \uc0ac\uc6a9\uc790\uac00 \uc27d\uac8c \ubc30\uc6b8 \uc218 \uc788\ub3c4\ub85d \ub3d5\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc5ec\uae30\uc5d0\ub294 \uc911\ub2e8\uc810 \ucd94\uac00, \uadf8\ub798\ud504 \uc0c1\ud0dc \ud3b8\uc9d1, \uacfc\uac70 \uadf8\ub798\ud504 \uc0c1\ud0dc \ubcf4\uae30 \ubc0f \uc5c5\ub370\uc774\ud2b8\ud558\uae30\uc640 \uac19\uc740 \uae30\ub2a5\uc774 \ud3ec\ud568\ub429\ub2c8\ub2e4.\n\n\uc774 \uc815\ubcf4\ub4e4\uc740 \ub7ad\uadf8\ub798\ud504\ub97c \ubc30\uc6b0\ub294 \ub370 \uc911\uc694\ud55c \uae30\ucd08\uac00 \ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub354 \uad81\uae08\ud55c \uc810\uc774\ub098 \ucd94\uac00\uc801\uc73c\ub85c \uc54c\uace0 \uc2f6\uc740 \ub0b4\uc6a9\uc774 \uc788\uc73c\uba74 \ub9d0\uc500\ud574 \uc8fc\uc138\uc694!\n</pre> <p>\uc790. \uc5ec\uae30\uae4c\uc9c0 Agent \uc218\ud589 \uc911 \uac1c\uc785\uc5d0 \uc131\uacf5\ud588\uc2b5\ub2c8\ub2e4. \uc6d0\ud558\ub294 \ub300\ub85c \uc911\uac04\uc5d0 \ub4e4\uc5b4\uac00\uc11c \uba48\ucd94\uace0, \ubc14\uafb8\uace0 \uc2f6\uc740 \uac83 \ubc14\uafb8\uace0, \uc774\uc5b4\uac00\uace0 \ubaa8\ub450 \ub2e4 \uac00\ub2a5\ud569\ub2c8\ub2e4. \uc774 \uc815\ub3c4\uba74 \uaf64\ub098 \uc790\uc720\ub3c4\uac00 \uc0dd\uaca8\uc11c \uc6d0\ud558\ub294 \uac83\ub4e4\uc744 \uad6c\ud604\ud558\ub294 \uac83\uc774 \uac00\ub2a5\ud569\ub2c8\ub2e4.</p> <p>\ub610 \ub2e4\uc2dc \uc81c \uc758\uacac \ucca8\uc5b8\ud558\uc790\uba74,</p> <ul> <li>Agent \uc758 \ubb38\uc81c\ub294 \ucee8\ud2b8\ub864\uc774 \ub108\ubb34 \ud798\ub4e4\ub2e4\ub294 \uc810 \uc774\uc5c8\uc2b5\ub2c8\ub2e4.<ul> <li>\uc77c\uc744 \uc798\ud558\ub294 \uac83 \uac19\uc73c\uba74\uc11c\ub3c4, \uac00\ub054\uc529 \uace0\uc7a5\ub098\uae30\ub3c4 \ud558\uace0, \ubcf5\uc7a1\ud55c \uac83\uc740 \uc798 \ubabb\ud558\uae30\ub3c4 \ud569\ub2c8\ub2e4.</li> </ul> </li> <li>\uc774\ub807\uac8c \uac1c\uc785 \ucc3d\uad6c\ub97c \ub9cc\ub4e4\uc5b4\ub450\uba74, \ub9ce\uc740 \ubcf4\uc644\uc774 \uac00\ub2a5\ud574\uc11c \uc9c4\uc9dc\ub85c! \ub9e4\uc6b0! \uc720\uc6a9\ud569\ub2c8\ub2e4.</li> </ul> In\u00a0[\u00a0]: Copied! <pre>class State(TypedDict):\n    messages: Annotated[list, add_messages]\n    # This flag is new\n    ask_human: bool\n</pre> class State(TypedDict):     messages: Annotated[list, add_messages]     # This flag is new     ask_human: bool <p><code>BaseModel</code> \uc744 \uc0c1\uc18d\ubc1b\uc544\uc11c Human \uc5d0\uac8c \uc694\uccad\ud560 \ub54c \ubcf4\ub0bc \ud1b5\ub85c\ub97c \ub9cc\ub4e4\uc5b4\uc90d\ub2c8\ub2e4. \uc774 \ud074\ub798\uc2a4\ub294 <code>tool</code>  \uc790\ub9ac\uc785\ub2c8\ub2e4.</p> In\u00a0[\u00a0]: Copied! <pre>from langchain_core.pydantic_v1 import BaseModel\n\n\nclass RequestAssistance(BaseModel):\n    \"\"\"Escalate the conversation to an expert. Use this if you are unable to assist directly or if the user requires support beyond your permissions.\n\n    To use this function, relay the user's 'request' so the expert can provide the right guidance.\n    \"\"\"\n\n    request: str\n</pre> from langchain_core.pydantic_v1 import BaseModel   class RequestAssistance(BaseModel):     \"\"\"Escalate the conversation to an expert. Use this if you are unable to assist directly or if the user requires support beyond your permissions.      To use this function, relay the user's 'request' so the expert can provide the right guidance.     \"\"\"      request: str <pre>/usr/local/lib/python3.10/dist-packages/IPython/core/interactiveshell.py:3553: LangChainDeprecationWarning: As of langchain-core 0.3.0, LangChain uses pydantic v2 internally. The langchain_core.pydantic_v1 module was a compatibility shim for pydantic v1, and should no longer be used. Please update the code to import from Pydantic directly.\n\nFor example, replace imports like: `from langchain_core.pydantic_v1 import BaseModel`\nwith: `from pydantic import BaseModel`\nor the v1 compatibility namespace if you are working in a code base that has not been fully upgraded to pydantic 2 yet. \tfrom pydantic.v1 import BaseModel\n\n  exec(code_obj, self.user_global_ns, self.user_ns)\n</pre> <p><code>chatbot</code> \ub178\ub4dc\ub97c \ub2e4\uc2dc \ub9cc\ub4e4\uaca0\uc2b5\ub2c8\ub2e4.</p> <ul> <li><code>llm</code> \uc5d0 <code>bind_tools()</code> \ud560 \ub54c, \uc704\uc5d0\uc11c \ub9cc\ub4e0 \ubaa8\ub378\uc744 \ucd94\uac00\ud558\uace0,</li> <li><code>ask_human</code> \ud50c\ub798\uadf8\ub97c llm \uc774 \ubd80\ub974\ub824\uace0 \ud55c\ub2e4\uba74, <code>true</code> \ub85c \ucf1c\uc8fc\ub294 \ucf54\ub4dc\ub97c \ub123\uc2b5\ub2c8\ub2e4.</li> </ul> In\u00a0[\u00a0]: Copied! <pre>tool = TavilySearchResults(max_results=2)\ntools = [tool]\n\n# We can bind the llm to a tool definition, a pydantic model, or a json schema\nllm_with_tools = llm.bind_tools(tools + [RequestAssistance])\n\n\ndef chatbot(state: State):\n    response = llm_with_tools.invoke(state[\"messages\"])\n    ask_human = False\n    if (\n        response.tool_calls\n        and response.tool_calls[0][\"name\"] == RequestAssistance.__name__\n    ):\n        ask_human = True\n    return {\"messages\": [response], \"ask_human\": ask_human}\n</pre> tool = TavilySearchResults(max_results=2) tools = [tool]  # We can bind the llm to a tool definition, a pydantic model, or a json schema llm_with_tools = llm.bind_tools(tools + [RequestAssistance])   def chatbot(state: State):     response = llm_with_tools.invoke(state[\"messages\"])     ask_human = False     if (         response.tool_calls         and response.tool_calls[0][\"name\"] == RequestAssistance.__name__     ):         ask_human = True     return {\"messages\": [response], \"ask_human\": ask_human} <p>\uc774\uc5b4\uc11c \uadf8\ub798\ud504\ub3c4 \ub9cc\ub4e4\uc5b4 \uc90d\ub2c8\ub2e4.  tools \ub178\ub4dc\ub294 tavily tool \uc744 \ub9cc\ub4e4\uc5b4\uc8fc\uace0\uc694, \uc774\ub530 \uc544\ub798\uc5d0\uc11c human \ub178\ub4dc\ub97c \ub530\ub85c \ucd94\uac00\ud569\ub2c8\ub2e4.</p> In\u00a0[\u00a0]: Copied! <pre>graph_builder = StateGraph(State)\n\ngraph_builder.add_node(\"chatbot\", chatbot)\ngraph_builder.add_node(\"tools\", ToolNode(tools=[tool]))\n</pre> graph_builder = StateGraph(State)  graph_builder.add_node(\"chatbot\", chatbot) graph_builder.add_node(\"tools\", ToolNode(tools=[tool])) <p><code>human</code> \ub178\ub4dc\ub97c \ub9cc\ub4e4\uc5b4 \uc90d\ub2c8\ub2e4.</p> <p><code>human</code> \ub178\ub4dc \ud568\uc218\ub294 interrupt \uac00 \uac78\ub824\uc11c \uc0ac\ub78c\uc5d0\uac8c \uc804\ub2ec \ub420 \ud14c\uc9c0\ub9cc, \ud639\uc2dc\ub77c\ub3c4 \uc0ac\ub78c\uc774 state \ub97c \ubcc0\uacbd\ud558\uc9c0 \uc54a\uc558\ub2e4\uba74, \uadf8 \uc0ac\uc2e4\uc744 \uba54\uc138\uc9c0\uc5d0 \ucd94\uac00\ud558\ub3c4\ub85d \ud558\uac8c\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0, \ub2e4\uc2dc state \uc5d0\uc11c <code>ask_human</code> \ud50c\ub798\uadf8\ub294 false \ub85c \uaebc\uc90d\ub2c8\ub2e4.</p> In\u00a0[\u00a0]: Copied! <pre>from langchain_core.messages import AIMessage, ToolMessage\n\n\ndef create_response(response: str, ai_message: AIMessage):\n    return ToolMessage(\n        content=response,\n        tool_call_id=ai_message.tool_calls[0][\"id\"],\n    )\n\n\ndef human_node(state: State):\n    new_messages = []\n    if not isinstance(state[\"messages\"][-1], ToolMessage):\n        # Typically, the user will have updated the state during the interrupt.\n        # If they choose not to, we will include a placeholder ToolMessage to\n        # let the LLM continue.\n        new_messages.append(\n            create_response(\"No response from human.\", state[\"messages\"][-1])\n        )\n    return {\n        # Append the new messages\n        \"messages\": new_messages,\n        # Unset the flag\n        \"ask_human\": False,\n    }\n\n\ngraph_builder.add_node(\"human\", human_node)\n</pre> from langchain_core.messages import AIMessage, ToolMessage   def create_response(response: str, ai_message: AIMessage):     return ToolMessage(         content=response,         tool_call_id=ai_message.tool_calls[0][\"id\"],     )   def human_node(state: State):     new_messages = []     if not isinstance(state[\"messages\"][-1], ToolMessage):         # Typically, the user will have updated the state during the interrupt.         # If they choose not to, we will include a placeholder ToolMessage to         # let the LLM continue.         new_messages.append(             create_response(\"No response from human.\", state[\"messages\"][-1])         )     return {         # Append the new messages         \"messages\": new_messages,         # Unset the flag         \"ask_human\": False,     }   graph_builder.add_node(\"human\", human_node) <p>\uc774\ubc88\uc5d4 \ub178\ub4dc \uc120\ud0dd \ub85c\uc9c1\uc744 \ucd94\uac00\ud558\uaca0\uc2b5\ub2c8\ub2e4. <code>select_next_node</code> \uac00 \ud544\uc694\ud558\uba74 <code>human</code> \ub178\ub4dc\ub85c \ubcf4\ub0b4\uc90d\ub2c8\ub2e4. \uadf8\uac8c \uc544\ub2c8\ub77c\uba74, \uc774\uc804 \ucc98\ub7fc 'tools_condition' \uc73c\ub85c \ubcf4\ub0c5\ub2c8\ub2e4.</p> <p><code>tools_condition</code> \uc740 <code>tool_calls</code> \uc758 \ub2f5\ubcc0\uc744 \ubc1b\uc558\ub294\uc9c0 \ubcf4\uace0, <code>action</code> \ub178\ub4dc\ub85c \ubcf4\ub0b4\uac70\ub098 \uadf8\ub798\ud504\ub97c \ub05d\ub0c5\ub2c8\ub2e4.</p> In\u00a0[\u00a0]: Copied! <pre>def select_next_node(state: State):\n    if state[\"ask_human\"]:\n        return \"human\"\n    # Otherwise, we can route as before\n    return tools_condition(state)\n\n\ngraph_builder.add_conditional_edges(\n    \"chatbot\",\n    select_next_node,\n    {\"human\": \"human\", \"tools\": \"tools\", \"__end__\": \"__end__\"},\n)\n</pre> def select_next_node(state: State):     if state[\"ask_human\"]:         return \"human\"     # Otherwise, we can route as before     return tools_condition(state)   graph_builder.add_conditional_edges(     \"chatbot\",     select_next_node,     {\"human\": \"human\", \"tools\": \"tools\", \"__end__\": \"__end__\"}, ) <p>\ud56d\uc0c1 \ub418\ub3cc\ub824 \ubcf4\ub0b4\ub294 edge \ub4e4\uc744 \ucd94\uac00\ud574\uc8fc\uace0 \ub9c8\ubb34\ub9ac\ud569\ub2c8\ub2e4. <code>human</code> \ub178\ub4dc \uc804\uc5d0\ub294 \uaf2d interrupt \ud558\uace0\uc694.</p> In\u00a0[\u00a0]: Copied! <pre># The rest is the same\ngraph_builder.add_edge(\"tools\", \"chatbot\")\ngraph_builder.add_edge(\"human\", \"chatbot\")\ngraph_builder.add_edge(START, \"chatbot\")\nmemory = MemorySaver()\ngraph = graph_builder.compile(\n    checkpointer=memory,\n    # We interrupt before 'human' here instead.\n    interrupt_before=[\"human\"],\n)\n</pre> # The rest is the same graph_builder.add_edge(\"tools\", \"chatbot\") graph_builder.add_edge(\"human\", \"chatbot\") graph_builder.add_edge(START, \"chatbot\") memory = MemorySaver() graph = graph_builder.compile(     checkpointer=memory,     # We interrupt before 'human' here instead.     interrupt_before=[\"human\"], ) <p>visualize \ud558\uba74 \uc544\ub798\uc640 \uac19\uc774 \uc0dd\uacbc\uc2b5\ub2c8\ub2e4.</p> In\u00a0[\u00a0]: Copied! <pre>from IPython.display import Image, display\n\ntry:\n    display(Image(graph.get_graph().draw_mermaid_png()))\nexcept Exception:\n    # This requires some extra dependencies and is optional\n    pass\n</pre> from IPython.display import Image, display  try:     display(Image(graph.get_graph().draw_mermaid_png())) except Exception:     # This requires some extra dependencies and is optional     pass <p>\uc774\uc81c \uadf8\ub798\ud504\ub974\ub974 \uc2e4\ud589\uc2dc\ucf1c\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.</p> In\u00a0[\u00a0]: Copied! <pre>user_input = \"AI agent \ub9cc\ub4dc\ub294 \ub370 \ub3c4\uc6c0 \uc880 \uc918\ubd10\ub77c!\"\nconfig = {\"configurable\": {\"thread_id\": \"5\"}}\n# The config is the **second positional argument** to stream() or invoke()!\nevents = graph.stream(\n    {\"messages\": [(\"user\", user_input)]}, config, stream_mode=\"values\"\n)\nfor event in events:\n    if \"messages\" in event:\n        event[\"messages\"][-1].pretty_print()\n</pre> user_input = \"AI agent \ub9cc\ub4dc\ub294 \ub370 \ub3c4\uc6c0 \uc880 \uc918\ubd10\ub77c!\" config = {\"configurable\": {\"thread_id\": \"5\"}} # The config is the **second positional argument** to stream() or invoke()! events = graph.stream(     {\"messages\": [(\"user\", user_input)]}, config, stream_mode=\"values\" ) for event in events:     if \"messages\" in event:         event[\"messages\"][-1].pretty_print() <pre>================================ Human Message =================================\n\nAI agent \ub9cc\ub4dc\ub294 \ub370 \ub3c4\uc6c0 \uc880 \uc918\ubd10\ub77c!\n================================== Ai Message ==================================\nTool Calls:\n  RequestAssistance (call_5DIhb5uSzfqjaR527dQuEdZs)\n Call ID: call_5DIhb5uSzfqjaR527dQuEdZs\n  Args:\n    request: AI agent \ub9cc\ub4dc\ub294 \ubc29\ubc95\uc5d0 \ub300\ud574 \uc790\uc138\ud788 \uc124\uba85\ud574 \uc8fc\uc138\uc694. \ud544\uc694\ud55c \uae30\uc220, \ub3c4\uad6c, \uc5b8\uc5b4, \uadf8\ub9ac\uace0 \ud504\ub85c\uc81d\ud2b8\uc758 \uc8fc\uc694 \ub2e8\uacc4\uc5d0 \ub300\ud574 \uc54c\ub824 \uc8fc\uc138\uc694.\n</pre> <p>\ub2e4\uc74c \ub3c4\uad6c\ub85c Human \uc744 \ubf51\uc558\uc2b5\ub2c8\ub2e4. request \ubb38\uad6c\ub3c4 \uc368\uc92c\uace0\uc694, interrupt \uac00 \ub418\uc5c8\uc2b5\ub2c8\ub2e4.</p> In\u00a0[\u00a0]: Copied! <pre>snapshot = graph.get_state(config)\nsnapshot.next\n</pre> snapshot = graph.get_state(config) snapshot.next Out[\u00a0]: <pre>('human',)</pre> <p>\uc774\uc81c \uc6b0\ub9ac\uac00 Human Expert \uac00 \ub418\uc5b4\uc11c \ub300\ub2f5\uc744 \ud574\uc90d\ub2c8\ub2e4.</p> <ol> <li><code>ToolMessage</code> \uc5d0 \ud560\ub9d0\uc744 \ub2f5\uc544\uc11c \ucd94\uac00\ud569\ub2c8\ub2e4, \uc790\uc5f0\uc2a4\ub798 <code>chatbot</code> \ub178\ub4dc\ub85c \ub118\uc5b4\uac00\uc8e0.</li> <li><code>update_state</code> \ub97c \ud638\ucd9c\uc5d0\uc11c \uba54\uc138\uc9c0\ub97c \uc5c5\ub370\uc774\ud2b8 \ud574\uc8fc\uaca0\uc2b5\ub2c8\ub2e4.</li> </ol> In\u00a0[\u00a0]: Copied! <pre>ai_message = snapshot.values[\"messages\"][-1]\nhuman_response = (\n    \"\ub0b4\uac00 \uc804\ubb38\uac00\uc57c. LangGraph \ub97c \uc0ac\uc6a9\ud558\uba74 AI Agent\ub97c \uc27d\uac8c \uc798 \ub9cc\ub4e4\uc218\uac00 \uc788\uc9c0.\"\n)\ntool_message = create_response(human_response, ai_message)\ngraph.update_state(config, {\"messages\": [tool_message]})\n</pre> ai_message = snapshot.values[\"messages\"][-1] human_response = (     \"\ub0b4\uac00 \uc804\ubb38\uac00\uc57c. LangGraph \ub97c \uc0ac\uc6a9\ud558\uba74 AI Agent\ub97c \uc27d\uac8c \uc798 \ub9cc\ub4e4\uc218\uac00 \uc788\uc9c0.\" ) tool_message = create_response(human_response, ai_message) graph.update_state(config, {\"messages\": [tool_message]}) Out[\u00a0]: <pre>{'configurable': {'thread_id': '5',\n  'checkpoint_ns': '',\n  'checkpoint_id': '1ef75a12-c4a7-69e5-8002-83c61e7b0665'}}</pre> In\u00a0[\u00a0]: Copied! <pre>graph.get_state(config).values[\"messages\"]\n</pre> graph.get_state(config).values[\"messages\"] Out[\u00a0]: <pre>[HumanMessage(content='AI agent \ub9cc\ub4dc\ub294 \ub370 \ub3c4\uc6c0 \uc880 \uc918\ubd10\ub77c!', additional_kwargs={}, response_metadata={}, id='2a2cec0b-b816-4e09-8c05-b7127d0b1903'),\n AIMessage(content='', additional_kwargs={'tool_calls': [{'id': 'call_5DIhb5uSzfqjaR527dQuEdZs', 'function': {'arguments': '{\"request\":\"AI agent \ub9cc\ub4dc\ub294 \ubc29\ubc95\uc5d0 \ub300\ud574 \uc790\uc138\ud788 \uc124\uba85\ud574 \uc8fc\uc138\uc694. \ud544\uc694\ud55c \uae30\uc220, \ub3c4\uad6c, \uc5b8\uc5b4, \uadf8\ub9ac\uace0 \ud504\ub85c\uc81d\ud2b8\uc758 \uc8fc\uc694 \ub2e8\uacc4\uc5d0 \ub300\ud574 \uc54c\ub824 \uc8fc\uc138\uc694.\"}', 'name': 'RequestAssistance'}, 'type': 'function'}], 'refusal': None}, response_metadata={'token_usage': {'completion_tokens': 45, 'prompt_tokens': 153, 'total_tokens': 198, 'completion_tokens_details': {'reasoning_tokens': 0}}, 'model_name': 'gpt-4o-mini-2024-07-18', 'system_fingerprint': 'fp_483d39d857', 'finish_reason': 'tool_calls', 'logprobs': None}, id='run-02921127-a8e4-4d78-89ba-065ec995e60d-0', tool_calls=[{'name': 'RequestAssistance', 'args': {'request': 'AI agent \ub9cc\ub4dc\ub294 \ubc29\ubc95\uc5d0 \ub300\ud574 \uc790\uc138\ud788 \uc124\uba85\ud574 \uc8fc\uc138\uc694. \ud544\uc694\ud55c \uae30\uc220, \ub3c4\uad6c, \uc5b8\uc5b4, \uadf8\ub9ac\uace0 \ud504\ub85c\uc81d\ud2b8\uc758 \uc8fc\uc694 \ub2e8\uacc4\uc5d0 \ub300\ud574 \uc54c\ub824 \uc8fc\uc138\uc694.'}, 'id': 'call_5DIhb5uSzfqjaR527dQuEdZs', 'type': 'tool_call'}], usage_metadata={'input_tokens': 153, 'output_tokens': 45, 'total_tokens': 198}),\n ToolMessage(content='\ub0b4\uac00 \uc804\ubb38\uac00\uc57c. LangGraph \ub97c \uc0ac\uc6a9\ud558\uba74 AI Agent\ub97c \uc27d\uac8c \uc798 \ub9cc\ub4e4\uc218\uac00 \uc788\uc9c0.', id='bffbbf81-e45b-48ab-a0c4-d41899cce362', tool_call_id='call_5DIhb5uSzfqjaR527dQuEdZs')]</pre> <p>resume \ud558\uaca0\uc2b5\ub2c8\ub2e4. \uc5ed\uc2dc\ub098 stream \uc744 \uc774\uc5b4\uac00\ub294\ub370 \uba54\uc138\uc9c0\ub294 \uc774\ubbf8 \ucd94\uac00\ud588\uc73c\ub2c8 <code>None</code> \uc744 \ub123\uc5b4\uc8fc\uba74 \ub429\ub2c8\ub2e4.</p> In\u00a0[\u00a0]: Copied! <pre>events = graph.stream(None, config, stream_mode=\"values\")\nfor event in events:\n    if \"messages\" in event:\n        event[\"messages\"][-1].pretty_print()\n</pre> events = graph.stream(None, config, stream_mode=\"values\") for event in events:     if \"messages\" in event:         event[\"messages\"][-1].pretty_print() <pre>================================= Tool Message =================================\n\n\ub0b4\uac00 \uc804\ubb38\uac00\uc57c. LangGraph \ub97c \uc0ac\uc6a9\ud558\uba74 AI Agent\ub97c \uc27d\uac8c \uc798 \ub9cc\ub4e4\uc218\uac00 \uc788\uc9c0.\n================================= Tool Message =================================\n\n\ub0b4\uac00 \uc804\ubb38\uac00\uc57c. LangGraph \ub97c \uc0ac\uc6a9\ud558\uba74 AI Agent\ub97c \uc27d\uac8c \uc798 \ub9cc\ub4e4\uc218\uac00 \uc788\uc9c0.\n================================== Ai Message ==================================\n\nAI \uc5d0\uc774\uc804\ud2b8\ub97c \ub9cc\ub4dc\ub294 \ub370 LangGraph\ub97c \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4:\n\n1. **LangGraph \uc18c\uac1c**: LangGraph\ub294 \uc790\uc5f0\uc5b4 \ucc98\ub9ac(NLP) \ubaa8\ub378\uc744 \uc27d\uac8c \uad6c\ucd95\ud558\uace0 \uc2e4\ud589\ud560 \uc218 \uc788\ub3c4\ub85d \ub3c4\uc640\uc8fc\ub294 \ud504\ub808\uc784\uc6cc\ud06c\uc785\ub2c8\ub2e4. \uc774\ub97c \ud1b5\ud574 \ubcf5\uc7a1\ud55c AI \uc5d0\uc774\uc804\ud2b8\ub97c \uac04\ud3b8\ud558\uac8c \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n2. **\ud544\uc694\ud55c \uae30\uc220 \ubc0f \ub3c4\uad6c**:\n   - **\ud504\ub85c\uadf8\ub798\ubc0d \uc5b8\uc5b4**: Python\uc740 NLP \ubc0f AI \uac1c\ubc1c\uc5d0 \ub110\ub9ac \uc0ac\uc6a9\ub429\ub2c8\ub2e4.\n   - **\ub77c\uc774\ube0c\ub7ec\ub9ac**: TensorFlow, PyTorch, Hugging Face Transformers \ub4f1\uacfc \uac19\uc740 \uba38\uc2e0\ub7ec\ub2dd \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n   - **LangGraph**: LangGraph \ud504\ub808\uc784\uc6cc\ud06c\ub97c \uc124\uce58\ud558\uace0 \ud65c\uc6a9\ud569\ub2c8\ub2e4.\n\n3. **\uc8fc\uc694 \ub2e8\uacc4**:\n   - **\ubaa9\ud45c \uc124\uc815**: AI \uc5d0\uc774\uc804\ud2b8\uac00 \uc218\ud589\ud560 \uc791\uc5c5\uacfc \uae30\ub2a5\uc744 \uc815\uc758\ud569\ub2c8\ub2e4.\n   - **\ub370\uc774\ud130 \uc218\uc9d1**: \ubaa8\ub378 \ud6c8\ub828\uc5d0 \uc0ac\uc6a9\ud560 \ub370\uc774\ud130\uc14b\uc744 \uc218\uc9d1\ud569\ub2c8\ub2e4.\n   - **\ubaa8\ub378 \uc120\ud0dd**: \uc801\ud569\ud55c NLP \ubaa8\ub378\uc744 \uc120\ud0dd\ud569\ub2c8\ub2e4.\n   - **\ubaa8\ub378 \ud6c8\ub828**: \uc120\ud0dd\ud55c \ubaa8\ub378\uc744 LangGraph\ub97c \uc0ac\uc6a9\ud558\uc5ec \ud6c8\ub828\ud569\ub2c8\ub2e4.\n   - **\ud14c\uc2a4\ud2b8 \ubc0f \ud3c9\uac00**: \ud6c8\ub828\ub41c \ubaa8\ub378\uc744 \ud14c\uc2a4\ud2b8\ud558\uace0 \uc131\ub2a5\uc744 \ud3c9\uac00\ud569\ub2c8\ub2e4.\n   - **\ubc30\ud3ec**: \ucd5c\uc885 \ubaa8\ub378\uc744 \uc2e4\uc81c \ud658\uacbd\uc5d0 \ubc30\ud3ec\ud569\ub2c8\ub2e4.\n\n4. **\ucd94\uac00 \uc790\ub8cc**: LangGraph\uc758 \uacf5\uc2dd \ubb38\uc11c\ub098 \ud29c\ud1a0\ub9ac\uc5bc\uc744 \ucc38\uace0\ud558\uc5ec \ub354 \uae4a\uc740 \uc774\ud574\ub97c \ub3d5\uace0 \uad6c\uccb4\uc801\uc778 \uc608\uc81c\ub4e4\uc744 \uc0b4\ud3b4\ubcf4\uc138\uc694.\n\n\uc774\uc640 \uac19\uc740 \ub2e8\uacc4\ub85c AI \uc5d0\uc774\uc804\ud2b8\ub97c \uad6c\ucd95\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub3c4\uc6c0\uc774 \ub354 \ud544\uc694\ud558\uba74 \uad6c\uccb4\uc801\uc778 \uc9c8\ubb38\uc744 \ud574 \uc8fc\uc138\uc694!\n</pre> <p>LangSmith Trace \ub97c \ucc38\uace0\ud574\ubcf4\uba74, Human \ub178\ub4dc\uc5d0\uc11c \uacb0\uacfc\ub97c \uc5bb\uc5b4 \ub300\ub2f5\uc744 \uc774\uc5b4\uac04 \uac83\uc744 \ud655\uc778 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p> <p>\uc5ec\uae30\uae4c\uc9c0 LangGraph \uc758 \uae30\ubcf8\uc801\uc778 \uc0ac\uc6a9\ubc95 \uc774\uc5c8\uc2b5\ub2c8\ub2e4. \uacf5\uc2dd \ud29c\ud1a0\ub9ac\uc5bc\uc5d0\ub294 \uacfc\uac70 \uc2dc\uc810\uc73c\ub85c \ub3cc\uc544\uac00\uc11c \uc774\uc5b4\uac00\ub294 \ub0b4\uc6a9\ub3c4 \uc788\uae34 \ud55c\ub370, \uc774 \uc678\uc5d0\ub3c4 \uc218\ub9ce\uc740 \ub514\ud14c\uc77c\ub4e4\uc774 \uc788\uc73c\ubbc0\ub85c, \ubcf8 \ubb38\uc11c\ub294 \uc5ec\uae30\uc11c \ub9c8\uce58\uace0, \ucd94\uac00 \uc790\ub8cc\ub4e4\ub85c \uc774\uc5b4\uc11c \uc18c\uac1c\ud558\uaca0\uc2b5\ub2c8\ub2e4.</p>"},{"location":"1_langgraph_start/#langgraph","title":"LangGraph \uc2dc\uc791\ud558\uae30\u00b6","text":"<p>\ub7ad\uadf8\ub798\ud504\ub85c \uac04\ub2e8\ud55c LLM application (\ucc57\ubd07) \uc744 \ub9cc\ub4e4\uc5b4\ubd05\uc2dc\ub2e4</p> <ul> <li>\uc6f9\uc744 \uc11c\uce58\ud558\uace0 \ub300\ub2f5\ud558\ub294 \ucc57\ubd07</li> <li>\ub300\ud654\uc758 \ub0b4\uc6a9\uc744 \uc800\uc7a5\ud558\uace0 \uc774\uc5b4\uac00\ub294 \ucc57\ubd07</li> <li>Route complex queries to a human for review</li> <li>Use custom state to control its behavior</li> <li>Rewind and explore alternative conversation paths</li> </ul>"},{"location":"1_langgraph_start/#setup","title":"Setup\u00b6","text":"<p>\ud544\uc694\ud55c \ud328\ud0a4\uc9c0\ub4e4\uc744 \uc124\uce58\ud569\ub2c8\ub2e4</p>"},{"location":"1_langgraph_start/#1-gpt-wrapper","title":"1. \uc815\ub9d0 \uac04\ub2e8\ud55c \ucc57\ubd07 (GPT Wrapper) \ub9cc\ub4e4\uae30\u00b6","text":"<p>LangGraph \ub85c GPT API \ub97c \ubcf4\ub0b4\uace0 \ub2f5\ubcc0 \ubc1b\ub294 \ucc57\ubd07\uc744 \ub9cc\ub4e4\uc5b4 \ubd05\uc2dc\ub2e4.</p> <ul> <li><p><code>StateGraph</code>\ub97c \uba3c\uc800 \ub9cc\ub4e4\uaca0\uc2b5\ub2c8\ub2e4.</p> <ul> <li><code>StateGraph</code> \uc624\ube0c\uc81d\ud2b8\ub294 \uc6b0\ub9ac\uc758 \ucc57\ubd07\uc744 \"state machine\" \uc73c\ub85c \uc815\uc758\ud569\ub2c8\ub2e4.</li> </ul> </li> <li><p><code>nodes</code> \ub4e4\uc744 \ucd94\uac00\ud569\ub2c8\ub2e4. LLM \uae30\ub2a5\uc744 \uc815\uc758\ud558\uace0,  <code>edges</code> \ub97c \uc5f0\uacb0\ud558\uc5ec \uc5b4\ub5bb\uac8c \ub3d9\uc791\ud560 \uc9c0 \ucd94\uac00\uac00 \uac00\ub2a5\ud569\ub2c8\ub2e4.</p> </li> </ul>"},{"location":"1_langgraph_start/#2","title":"2. \ucc57\ubd07\uc5d0 \ub3c4\uad6c\ub97c \ucd94\uac00\ud574\uc8fc\uae30\u00b6","text":"<p>\ud604\uc7ac \ucc57\ubd07 (LLM) \uc774 \ub2f9\uc5f0\ud788 \ubcf8\uc778 \"\uae30\uc5b5\" \ub9cc \uac00\uc9c0\uace0\ub294 \ub300\ub2f5\uc744 \ubabb \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub2c8 \uc6f9 \uc11c\uce6d \ub3c4\uad6c\ub97c \uc190\uc5d0 \uc950\uc5b4\uc8fc\uace0 \uac80\uc0c9\ud574\uc624\ub77c\uace0 \ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \uad00\ub828 \uc815\ubcf4\ub97c \uc54c\uc544\uc11c \uac80\uc0c9\ud574\uc11c \ub354 \uc798 \ub2f5\ubcc0\ud574 \uc8fc\uaca0\uc8e0.</p>"},{"location":"1_langgraph_start/#requirements","title":"Requirements\u00b6","text":"<p>\ud544\uc694 \ud328\ud0a4\uc9c0\ub791 API \ud0a4\ub97c \uc14b\uc5c5\ud558\uaca0\uc2b5\ub2c8\ub2e4.</p> <p>Tavily Search Engine \uc640 TAVILY_API_KEY \ub97c \uc14b\uc5c5\ud558\uaca0\uc2b5\ub2c8\ub2e4.</p> <p>Tavily \ub294 \uc6f9 \uc11c\uce6d\uc744 api \ub85c \uc5f0\uacb0\uc2dc\ucf1c\uc8fc\ub294 \ub3c4\uad6c \uc785\ub2c8\ub2e4.</p>"},{"location":"1_langgraph_start/#3","title":"3. \ucc57\ubd07\uc5d0 \uba54\ubaa8\ub9ac \ucd94\uac00\ud558\uae30\u00b6","text":"<p>\ucc57\ubd07\uc740 \uc6f9 \uc11c\uce6d\uc774 \uac00\ub2a5\ud558\uc9c0\ub9cc, \ub300\ud654\ub97c \uc774\uc5b4\ub098\uac00\ub824\uba74 \uba54\ubaa8\ub9ac\ub97c \uac00\uc9c0\uace0 \uc788\uc5b4\uc57c \ud558\uaca0\uc8e0. \uba54\ubaa8\ub9ac\ub97c \ucd94\uac00\ud574\uc918\uc11c \uba40\ud2f0\ud134 \ub300\ud654\uc5d0 \uc77c\uad00\uc131\uc744 \ubd80\uc5ec\ud558\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.</p> <p>LangGraph \ub294 persistent checkpointing \uc774\ub77c\ub294 \uac1c\ub150\uc73c\ub85c \uc774 \uba54\ubaa8\ub9ac \ubb38\uc81c\ub97c \ud574\uacb0\ud569\ub2c8\ub2e4. <code>checkpointer</code> \ub97c \uadf8\ub798\ud504 \ucef4\ud30c\uc77c \ud560\ub54c \ub123\uc5b4\uc8fc\uace0, <code>thread_id</code> \ub97c \uadf8\ub798\ud504 \ud638\ucd9c\ud560 \ub54c \uc0ac\uc6a9\ud558\uba74, LangGraph \uac00 \uc790\ub3d9\uc73c\ub85c state \ub97c \uae30\uc5b5\ud558\uace0 \ub118\uaca8\uc90d\ub2c8\ub2e4. \uac19\uc740 <code>thread_id</code> \ub85c \uadf8\ub798\ud504\ub97c \ud638\ucd9c\ud558\uba74, \uc800\uc7a5\ub41c state \ub97c \ub85c\ub529\ud558\uc5ec \uc774\uc5b4\uac11\ub2c8\ub2e4.</p> <p>checkpointing \uc740 \ub2e8\uc21c \uba54\ubaa8\ub9ac\ubcf4\ub2e4\ub294 \ud6e8\uc52c \ub354 \ud30c\uc6cc\ud480\ud55c \ubc29\ubc95\uc785\ub2c8\ub2e4. \ubcf5\uc7a1\ud55c state\ub97c \uc800\uc7a5\ud558\uace0, \uc7ac\uac1c \ud558\ub294 \uae30\ub2a5\uc774\uae30 \ub54c\ubb38\uc5d0,</p> <ul> <li>error recovery</li> <li>human-in-the-loop workflows</li> <li>time travel interactions, and more \uc640 \uac19\uc740 \uae30\ub2a5\ub4e4\uc744 \uad6c\ud604 \uac00\ub2a5\ud558\uac8c \ud569\ub2c8\ub2e4.</li> </ul> <p>\uc6b0\uc120\uc740 \uba40\ud2f0\ud134 \ub300\ud654\ub97c \uc704\ud55c \uba54\ubaa8\ub9ac \uae30\ub2a5\uc73c\ub85c \ubd80\ud130 \uc2dc\uc791\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.</p> <p><code>MemorySaver</code> checkpointer \ub97c \ub9cc\ub4e4\uba74\uc11c \uc2dc\uc791\ud558\uc8e0.</p>"},{"location":"1_langgraph_start/#4-human-in-the-loop","title":"4. Human-in-the-loop\u00b6","text":"<p>\ub2f9\uc5f0\ud55c \uc774\uc57c\uae30 \uc774\uc9c0\ub9cc, Agent \ub294 unreliable, \ubbff\uc744 \uc218\uac00 \uc5c6\uc5b4\uc694. \ubd80\ud558\uc9c1\uc6d0\uc774\ub77c\uace0 \uc0dd\uac01\ud558\uba74 \ub418\ub294\ub370, \uc0ac\ub78c\ub3c4 \ubd80\ud558\uc9c1\uc6d0\uc774 \uc2e4\uc218\ud560 \uac83\uc744 \ub300\ube44\ud574\uc57c\ud558\uc8e0? \uadf8\ub798\uc11c \uc5b4\ub5a4 \uc77c\uc744 \uc2dc\ud0a4\uace0, \uc911\uac04\uc5d0 \uac1c\uc785\ud574\uc11c \uccb4\ud06c\ub97c \ud574\uc57c\ud569\ub2c8\ub2e4. \uc2b9\uc778 \uacfc\uc815\uc744 \uc2dc\uc2a4\ud15c\uc5d0 \ub123\uc5b4\ub450\ub294 \uac83\uacfc \ube44\uc2b7\ud558\uc8e0.</p> <p>LangGraph \ub294 <code>human-in-the-loop</code> workflows \ub97c \uc5ec\ub7ec\uac00\uc9c0 \ubc29\ubc95\uc73c\ub85c \uc9c0\uc6d0\ud569\ub2c8\ub2e4. \uc774\ubc88 \uc2e4\uc2b5\uc5d0\uc11c\ub294 LangGraph\uc758 <code>interrupt_before</code> \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud574\uc11c \ub178\ub4dc \uc2e4\ud589 \uc804\ub9c8\ub2e4 \ubaa8\ub450 \uba48\ucdb0\uc11c \uc0ac\ub78c\uc774 \uac1c\uc785\ud558\ub3c4\ub85d \ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.</p> <p>\ucc38\uace0\ub85c, \uc774 Human-in-the-loop \uae30\ub2a5\uc774 LangGraph \uc774\uc804 LangChain \uc5d0\uc11c\ub294 \uad6c\ud604\uc774 \uc5b4\ub824\uc6cc\uc11c \ub9ce\uc740 \uac1c\ubc1c\uc790\ub4e4\uc758 \ubd88\ub9cc\uc744 \uc0c0\uc5c8\uc2b5\ub2c8\ub2e4.</p>"},{"location":"1_langgraph_start/#5-state","title":"5. State \ubcc0\uacbd\ud558\uae30\u00b6","text":"<p>\uc55e\uc120 \uc2e4\uc2b5\uc5d0\uc11c\ub294 interrupt \ub97c \uac78\uace0, state\ub97c \ubd24\uc2b5\ub2c8\ub2e4. <code>read</code> \ub9cc \ud588\uc8e0. \uc774\ubc88\uc5d0\ub294 <code>write</code>\ub97c \ud574\uc11c state \ub97c \ub9c8\uc74c\ub300\ub85c \ubcc0\uacbd\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.</p> <p>LangGraph \ub294 manually update state \uac00 \uac00\ub2a5\ud569\ub2c8\ub2e4. agent \uac00 \uc6d0\uce58 \uc54a\ub294 \ub3d9\uc791\uc744 \ubabb\ud558\ub3c4\ub85d \ub9c9\uac70\ub098, \ubcc0\uacbd\uc2dc\ud0a4\uac70\ub098 \ub2e4\uc591\ud558\uac8c \ud65c\uc6a9\uc774 \uac00\ub2a5\ud569\ub2c8\ub2e4.</p> <p>Checkpointed state \ub97c \uc9c1\uc811 \ubcc0\uacbd \uc2dc\ucf1c\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.</p>"},{"location":"1_langgraph_start/#message-overwrite","title":"Message \ub97c \ub367\ubd99\uc774\ub294\uac8c \uc544\ub2c8\ub77c overwrite \ud558\uace0 \uc2f6\ub2e4\uba74?\u00b6","text":"<p><code>add_messages</code> \ud568\uc218\ub294 <code>State</code> \uc5d0 \uba54\uc138\uc9c0\ub97c <code>append</code> \ud558\uc9c0\ub9cc, ID \ub97c \ucc3e\uc544\uc11c \uc77c\uce58\ud558\ub294\uac8c \uc788\uc73c\uba74 overwrite \ub97c \ud569\ub2c8\ub2e4, \uc790\uc138\ud55c \ub3d9\uc791\uc740 \uacf5\uc2dd \ubb38\uc11c \ub9c1\ud06c\ub97c \ucc38\uc870\ud558\uc138\uc694.</p> <p>\uc774\ub97c \uc774\uc6a9\ud558\uba74, \uc6d0\ud558\ub294\ub300\ub85c \ub3d9\uc791\uc744 \ubc14\uafd4\uc904 \uc218 \uc788\uaca0\uc8e0. \ub2e4\uc2dc \uc9c8\ubb38\ubd80\ud130 \ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.</p>"},{"location":"1_langgraph_start/#6-customizing-state","title":"6. Customizing State\u00b6","text":"<p>\uc9c0\uae08\uae4c\uc9c0\ub294 State \uac00 \ub2e8\uc21c \uba54\uc138\uc9c0\ub9cc \ub2f4\uace0 \uc788\uc5c8\uc8e0? State \uc5d0 \ub354 \ub9ce\uc740 \uc815\ubcf4\ub97c \ub2f4\uc544\uc11c \ubcf5\uc7a1\ud55c \uc77c\uc744 \uc2dc\ucf1c \ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.</p> <p>\uc55e\uc120 \ud30c\ud2b8\uae4c\uc9c0\ub294 \"\ud56d\uc0c1\" interrupt \uac00 \ub418\uc5b4\uc11c \uc0ac\ub78c\uc774 \uac1c\uc785\ud558\ub3c4\ub85d \ud588\uc8e0.  \uc774\ubc88\uc5d0\ub294 \uc0ac\ub78c\uc5d0\uac8c \uc694\uccad\uc744 \ud560\uc9c0, \uc54c\uc544\uc11c \ud560\uc9c0, LLM \uc774 \ud310\ub2e8\ud558\ub3c4\ub85d \ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.</p> <p>\uc774\ub97c \uad6c\ud604\ud558\uae30 \uc704\ud55c \uccab\ubc88\uc9f8 \ubc29\ubc95\uc740 \"Human\" \ub178\ub4dc\ub97c \ub9cc\ub4e4\uc5b4\uc11c \uadf8 \ub54c \uba48\ucd94\ub3c4\ub85d\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. \"Human\" tool \uc744 LLM \uc774 \ubd80\ub974\uba74 \"Human\" \ub178\ub4dc\ub85c \uadf8\ub798\ud504\uac00 \uac00\uace0, \uba48\ucd94\ub3c4\ub85d \ud558\ub294 \uac83\uc774\uc8e0.</p> <p><code>State</code> \uc5d0 <code>ask_human</code> \uba64\ubc84 \ubcc0\uc218\ub97c \ucd94\uac00\ud558\uaca0\uc2b5\ub2c8\ub2e4.</p>"},{"location":"intros/Agent/","title":"Agentic Application","text":"<p>\uc5d0\uc774\uc804\ud2b8 (Agent) \ub294 LLM (\ub610\ub294 LMM, FM) \uc744 \uc798 \uc0ac\uc6a9\ud558\ub294 \uac00\uc7a5 \ub300\ud45c\uc801\uc778 \ubc29\ubc95\uc785\ub2c8\ub2e4. \uae00\uc744 \uc791\uc131\ud558\uace0 \uc788\ub294 \ud604\uc2dc\uc810 \uae30\uc900\uc758 (24.09) ChatGPT \uc11c\ube44\uc2a4\ub3c4 \ud558\ub098\uc758 Agent \ub77c\uace0 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc0ac\uc6a9\uc790\uc640 \ub300\ud654\ub97c \ud558\uba74\uc11c \ud544\uc694\uc5d0 \ub530\ub77c \uc6f9\ube0c\ub77c\uc6b0\uc9d5\ub3c4 \ud558\uace0, \ucf54\ub4dc\ub97c \uc791\uc131\ud574\uc11c \uc218\ud589\ud574\ubcf4\uae30\ub3c4 \ud558\uace0, dalle \ub97c \ud1b5\ud574 \uadf8\ub9bc\uc744 \uadf8\ub824\uc8fc\uae30\ub3c4 \ud558\uc8e0. GPT \ub77c\ub294 LLM \uc5d0 Agent \uac1c\ub150\uc774 \ucd94\uac00\ub418\uc5b4 ChatGPT\ub77c\ub294 \ubcf4\ub2e4 \ub611\ub611\ud55c \uc11c\ube44\uc2a4\ub97c \ub9cc\ub4e0 \uac83\uc785\ub2c8\ub2e4.  </p> <p>LangGraph \uc5d0\uc11c\ub294 \uc774\ub97c Agent \ub77c\uace0 \uce6d\ud558\uae30 \ubcf4\ub2e4\ub294 \"Agentic\" \ud55c \uc2dc\uc2a4\ud15c\uc774\ub2e4 \ub77c\uace0 \ud45c\ud604\ud569\ub2c8\ub2e4. \uba85\ud655\ud55c Agent \ub77c\ub294 \uae30\uc900\uc740 \uc5c6\uace0, LLM \uc5d0 Agentic \ud55c \ub3d9\uc791\ub4e4\uc744 \ucd94\uac00\ud55c \uc2dc\uc2a4\ud15c \ub4e4\uc774 \uc788\ub294 \uac83\uc774\uc8e0.  </p> <p>Agentic \ud55c \uc2dc\uc2a4\ud15c\uc740 LLM \uc774 \uc9c1\uc811 \ud589\ub3d9\uc744 \ud310\ub2e8\ud558\uace0 \uc218\ud589\ud558\ub294 \uac83\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \ub300\ud45c\uc801\uc73c\ub85c\ub294 \uc544\ub798\uc640 \uac19\uc740 \uc608\uc2dc\uac00 \uc788\uaca0\ub124\uc694. - LLM \uc744 \uc774\uc6a9\ud55c \ub77c\uc6b0\ud305  - LLM \uc774 \uc9c1\uc811 \uc5b4\ub5a4 \ub3c4\uad6c\ub97c \uc0ac\uc6a9\ud560\uc9c0 \uacb0\uc815 - \uc0dd\uc131\ub41c \ub2f5\ubcc0\uc774 \ucda9\ubd84\ud55c\uc9c0 \uc544\ub2cc\uc9c0 LLM \uc774 \ub2e4\uc2dc \ud310\ub2e8</p> <p>\uc608\ub97c \ub4e4\uc790\uba74, \uc0ac\uc6a9\uc790\uac00 \"\uc9c0\uad6c \ud45c\uba74\uc801 \uad6c\ud574\ubd10\" \ub77c\uace0 \ud588\uc744 \ub54c, LLM \uc774 \"xxx \uc774\ub2e4\" \ub77c\uace0 \ub300\ub2f5\ud588\ub2e4\uace0 \uac00\uc815\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \uc774 \ub2f5\ubcc0\uc744 LLM \uc774 \ub2e4\uc2dc \uc77d\uc5b4\ubcf4\uace0 \ud2c0\ub838\ub294\uc9c0 \ud310\ub2e8\ud558\uace0, \uc6f9\ube0c\ub77c\uc6b0\uc9d5\uc744 \ud560\uc9c0, \uc5b4\ub5a4 \ub370\uc774\ud130\ubca0\uc774\uc2a4\ub97c \ucc3e\uc544\ubcfc\uae30 \uacb0\uc815\ud558\uace0, \ub2e4\uc2dc \uc62c\ubc14\ub978 \ub2f5\ubcc0\uc744 \ud558\ub294 \ud5f9\uc704\uac00 \ubaa8\ub450 Agentic\ud55c \ub3d9\uc791\uc785\ub2c8\ub2e4.  </p> <p>\uc704 \ud589\uc704\ub4e4\uc774 loop \uc744 \ub3cc\uba74\uc11c \ub3d9\uc791\ud55c\ub2e4\uba74, \ub354\uc6b1 Agentic \ud558\ub2e4\uace0 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.  </p> <p>LangGraph \uc5d0\uc11c \uc815\uc758\ud55c Agentic \ud55c \ub3d9\uc791\ub4e4\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4.  </p> <ul> <li>Tool calling: \ubb34\uc5c7\uc774\ub4e0 (ex. \uc6f9\ube0c\ub77c\uc6b0\uc9d5, API \ud638\ucd9c) \ub2e4\ub978 \ud589\uc704\ub97c \ud558\uace0 \uc635\ub2c8\ub2e4.</li> <li>Memory: \ub300\ud654 \ub0b4\uc6a9\uc774\ub098 \uc55e\uc120 \ub3d9\uc791\ub4e4\uc758 \ub9e5\ub77d \uc815\ubcf4\ub4e4\uc744 \uae30\uc5b5\ud569\ub2c8\ub2e4.</li> <li>Planning: LLM \uc774 \uc5b4\ub5a4 \ub3d9\uc791\uc744 \ud560\uc9c0 \uacc4\ud68d\ud569\ub2c8\ub2e4, \uc774\uac83\ub3c4 LLM \uc774 \uc0dd\uc131\ud569\ub2c8\ub2e4.</li> </ul>"},{"location":"intros/Agent/#langgraph","title":"LangGraph \uc758 \ud2b9\uc9d5","text":"<p>LangGraph\ub294 Agentic \uc2dc\uc2a4\ud15c\uc744 \uc0ac\uc6a9\uc790\ub4e4\uc774 \uc27d\uac8c \ub9cc\ub4e4 \uc218 \uc788\ub3c4\ub85d LangChain \uc5d0\uc11c \ub9cc\ub4e0 \ud504\ub808\uc784\uc6cc\ud06c\uc785\ub2c8\ub2e4.  </p> <p>\ud544\uc790\uc758 \uc758\uacac\uc744 \ucca8\uc5b8\ud558\uc790\uba74, - LangChain\uc774 \uc560\ucd08\uc5d0 LLM application \uc744 \uc798 \ub9cc\ub4e4\uae30 \uc704\ud55c \ud504\ub808\uc784\uc6cc\ud06c\uc774\uace0, \ub2f9\uc5f0\ud788 Agent \uad6c\ud604\uc744 \uc9c0\uc6d0\ud588\uc2b5\ub2c8\ub2e4. - \uadf8\ub7f0\ub370 LangChain \uc758 AgentExecuter \ub294 \uc81c\uc57d\uc774 \ub9ce\uc774 \uc788\uc5b4\uc11c product level \uc5d0\uc11c \uc0ac\uc6a9\ud558\uae30\uac00 \uc5b4\ub824\uc6e0\uc2b5\ub2c8\ub2e4. \ud2b9\ud788 \uc911\uac04 \uac1c\uc785\uc774 \uc548\ub418\uc5b4 \ucd08\uae30 \uad6c\ud604\uc740 \ub9e4\uc6b0 \uc26c\uc6e0\uc73c\ub098, \ub514\ud14c\uc77c\ud55c \ucee8\ud2b8\ub864\uc774 \ubd88\uac00\ud588\uc8e0. - \uc560\ucd08\uc5d0 LangChain\uc774 GPT3 \ucd9c\uc2dc\uc640 ChatGPT \ucd9c\uc2dc \uc0ac\uc774\uc5d0 \ub098\uc628 \ub3c4\uad6c\uc774\uace0, \uc0ac\uc6a9\uc790\ub4e4\uc758 \uc9c4\uc785\uc7a5\ubcbd\uc744 \ub0ae\ucdb0\uc8fc\ub294 \ub3c4\uad6c\uc784\uc744 \uac10\uc548\ud558\uba74 \uc774\ud574\uac00 \ub418\ub294 \uc601\uc5ed\uc785\ub2c8\ub2e4. - \uc0ac\uc6a9\uc790\ub4e4\uc740 \uc88b\uc740 Agentic \uc2dc\uc2a4\ud15c\uc744 \ub9cc\ub4e4\uae30 \uc704\ud574 LangChain \uc744 \uc774\ud0c8\ud588\uace0, \uc774\ub97c \ubcf4\uc644\ud558\uae30 \uc704\ud574 \ucd9c\uc2dc\ud55c \ud504\ub808\uc784\uc6cc\ud06c\uac00 LangGraph \uc785\ub2c8\ub2e4. - LangChain\uc744 \ub354 \uc774\uc0c1 \uc4f0\uc9c0 \uc54a\ub294 \uc774\uc720 - \ud574\ucee4\ub274\uc2a4 \uc4f0\ub808\ub4dc \ub97c \ucc38\uc870\ud558\uc2dc\uba74, \ub2e4\ub978 \uc0ac\uc6a9\uc790\ub4e4\uc758 \uc758\uacac\uacfc LangChain \uc758 \ucc3d\uc5c5\uc790\uc778 Harrison\uc758 \uc0dd\uac01/\ubc29\ud5a5\uc131 \uc744 \ubcf4\uc2e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc9c1\uc811 harrison\uc774 \ub313\uae00\ub85c \ud574\uba85(?) \ud558\ub294 \ub0b4\uc6a9\uc744 \ubcf4\uc2e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4. </p> <p>LangGraph\uc5d0\uc11c \uc8fc\uc7a5\ud558\ub294 \ubcf8\uc778\ub4e4\uc758 \uc7a5\uc810 (Agentic \uc2dc\uc2a4\ud15c\uc744 \ub9cc\ub4e4\uae30 \uc704\ud55c \ud2b9\uc7a5\uc810) \uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4.</p> <ul> <li>Controllability</li> <li>Human-in-the-Loop</li> <li>Streaming First</li> </ul>"},{"location":"intros/Agent/#controllabillty","title":"Controllabillty","text":"<p>\uc55e\uc11c \ubf51\uc740 LangChain \uc758 \ubd80\uc871\ud55c \uc810\uc774 \ub514\ud14c\uc77c\ud55c \ucee8\ud2b8\ub864\uc774 \ubcf4\uc644\ub418\uc5b4 \uc654\uc2b5\ub2c8\ub2e4. High-Level API\ub97c \uc9c0\uc6d0\ud558\ub294 LangChain\uacfc \ub2e4\ub974\uac8c, LangGraph\ub294 \"Extremely Low Level\" \uc774\ub77c\uace0 \ud45c\ud604\ud569\ub2c8\ub2e4. \uadf8\ub798\uc11c \uc0ac\uc6a9\uc790 (\uac1c\ubc1c\uc790) \ub294 \uc544\uc8fc \uc790\uc138\ud558\uac8c \ucee8\ud2b8\ub864\uc774 \uac00\ub2a5\ud558\uace0 reliable \ud55c \uc2dc\uc2a4\ud15c\uc744 \uac1c\ubc1c\ud560 \uc218 \uc788\uc8e0. </p>"},{"location":"intros/Agent/#human-in-the-loop","title":"Human-in-the-loop","text":""}]}